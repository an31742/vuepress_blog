import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as n,a}from"./app-CEBb2VWP.js";const l={},e=a(`<h1 id="页面性能类" tabindex="-1"><a class="header-anchor" href="#页面性能类"><span>页面性能类</span></a></h1><h2 id="性能优化的原则" tabindex="-1"><a class="header-anchor" href="#性能优化的原则"><span>性能优化的原则</span></a></h2><ul><li>多使用内存缓存或其他方法</li><li>减少cpu计算量，减少网络加载耗时</li><li>适用所有编程的性能优化   空间换时间</li></ul><h3 id="加载更快" tabindex="-1"><a class="header-anchor" href="#加载更快"><span>加载更快</span></a></h3><ul><li>减少资源体积：压缩代码，gzip压缩</li><li>减少访问次数：合并代码，ssr服务段渲染，缓存 静态资源增加。资源合并</li><li>适用更快的网络：CDN加速</li></ul><h3 id="渲染更快" tabindex="-1"><a class="header-anchor" href="#渲染更快"><span>渲染更快</span></a></h3><ul><li>css放到head，js放到body下面</li><li>尽早开始执行js，用DOMContentloaded触发</li><li>懒加载图片，路由懒加载</li><li>对DOM查询进行缓存，频繁DOM操作合并到一起插入DOM结构</li><li>节流和防抖</li></ul><h2 id="提升页面性能的方法有哪些" tabindex="-1"><a class="header-anchor" href="#提升页面性能的方法有哪些"><span>提升页面性能的方法有哪些？</span></a></h2><ul><li>1.资源要压缩合并，减少HTTP请求。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CSS：外网地址，就涉及到域名解析的过程；</span></span>
<span class="line"><span>JS：就涉及到脚本的同步加载还是异步加载，同时影响页面的DOM tree/CSSOM 树的渲染；</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>2.非核心代码使用异步加载，异步加载的方式，区别。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>【方式】</span></span>
<span class="line"><span>1.动态异步脚本。页面动态添加script标签。</span></span>
<span class="line"><span>2.defer</span></span>
<span class="line"><span>3.async</span></span>
<span class="line"><span></span></span>
<span class="line"><span>【区别】</span></span>
<span class="line"><span>1.defer:都是异步加载，在HTML解析完成后执行，有多个JS的话，按顺序进行执行。</span></span>
<span class="line"><span>2.async:都是异步加载，加载完成后就开始执行，和执行顺序和加载顺序都没有关系。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>【defer】:head标签内有defer异步加载的JS，可以看到body内的HTML解析完成后（包括DOM树怎么渲染，同步的脚本下载完成后的执行后），才执行异步的脚本。</li><li>但是异步的脚本其实早就开始下载了。</li><li>使用：就是所有的脚本都可以写defer异步加载的方式。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>&lt;head&gt;</span></span>
<span class="line"><span>  &lt;script src=&quot;./test_derfer_1.js&quot; type=&quot;text/javascript&quot; defer&gt;&lt;/script&gt;</span></span>
<span class="line"><span>  &lt;script src=&quot;./test_derfer_2.js&quot; type=&quot;text/javascript&quot; defer&gt;&lt;/script&gt;</span></span>
<span class="line"><span>&lt;/head&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>  &lt;div class=&quot;app&quot;&gt;</span></span>
<span class="line"><span>    &lt;div class=&quot;box&quot; id=&quot;box&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span>  &lt;/div&gt;</span></span>
<span class="line"><span>  &lt;script src=&quot;./index.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span>&lt;/body&gt;</span></span>
<span class="line"><span>------------------------</span></span>
<span class="line"><span>1</span></span>
<span class="line"><span>df_1</span></span>
<span class="line"><span>df_2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>【async】：head头部放入async异步加载的JS，async_1.js较大，可以看到输出的结果就是异步加载的脚本，只要它下载完成，就要开始执行脚本</li><li>不管你DOM树有没有渲染好或你同步的JS有没有执行的。</li><li>使用：单独的JS的内容，不依赖其他文件的JS。可以让它下载后执行。</li><li>3.浏览器缓存，缓存的分类，和原理</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>【强缓存】：在一定时间内，不直接请求，拿过来就用。</span></span>
<span class="line"><span>Expires : 服务端端的绝对过期时间，有可能客户端时间和浏览器不一样。</span></span>
<span class="line"><span>Cache-Control:max-age = 3600 ：相对时间，3600秒内不会向服务器拿这个文件，以这个为主。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>【协商缓存】：强缓超出过期时间，浏览器有这个副本，不确定能不能用，需要请求下，返回的状态码是304</span></span>
<span class="line"><span>1.Last-Modified 上次服务器带的这个时间。</span></span>
<span class="line"><span>2.下次浏览器请求时，会用这个if Modified-Since字段，</span></span>
<span class="line"><span>把Last-Modified字段的val时间传给服务器。</span></span>
<span class="line"><span>3.问能不能我们这个副本能不能用。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if-None-Match:把上次Etag的hash值作为该字段的值，传回去，就知道哪次副本的版本还能不能用。</span></span>
<span class="line"><span>一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>不带缓存的请求：</span></span>
<span class="line"><span>【Request：】</span></span>
<span class="line"><span>GET /i/yahoo/gif HTTP 1.1</span></span>
<span class="line"><span>Host: us.yimg.com</span></span>
<span class="line"><span>【Response:】</span></span>
<span class="line"><span>HTTP 1.1 200 OK</span></span>
<span class="line"><span>Last-Modified:Tue,12 Dec 200603:03:59 GMT</span></span>
<span class="line"><span>ETag:”10c24bc-4ab-457elc1f“</span></span>
<span class="line"><span></span></span>
<span class="line"><span>再次请求相同组件:</span></span>
<span class="line"><span>【Request】</span></span>
<span class="line"><span>GET /i/yahoo/gif HTTP 1.1</span></span>
<span class="line"><span>Host: us.yimg.com</span></span>
<span class="line"><span>If-Modified-Since:Tue,12 Dec 200603:03:59 GMT</span></span>
<span class="line"><span>If-None-Match:”10c24bc-4ab-457elc1f“</span></span>
<span class="line"><span>【Response】</span></span>
<span class="line"><span>HTTP 1.1 304 Not Midified</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>4.CDN加速 根据地方不同加载的服务不同静态资源</li><li>5.预解析DNS：DNS Prefetching是具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能减少用户的等待时间，提升用户体验。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>1. 用meta信息来告知浏览器, 当前页面要做DNS预解析:</span></span>
<span class="line"><span>&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;on&quot; /&gt;</span></span>
<span class="line"><span>2. 在页面header中使用link标签来强制对DNS预解析: </span></span>
<span class="line"><span>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;http://bdimg.share.baidu.com&quot; /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>6.缓存AJAX：GET的请求，是可以（而且默认）在客户端进行缓存的，除非指定了不同的地址，否则同一个地址的AJAX请求，不会重复在服务器执行，而是返回304。</li><li>7.精简混淆JavaScript，精简CSS</li><li>8.动画要使用CSS3的translate，不会引起浏览器的重绘和重排，这就相当nice了。这点就很牛逼了。页面不会Repaint（没有重新计算render tree）</li><li>9.静态资源要使用hash后缀根据文件内容计算hash后缀.文件内容不变，则hash不变则url不变.url和文件不变 会自动触发缓存</li><li>10.服务端渲染</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ssr将网页和数据一起加载一起渲染。 </span></span>
<span class="line"><span></span></span>
<span class="line"><span>前后端分离：先加载再加载数据，再渲染数据</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>11.懒加载  并非一下子全部加载随着用户不断操作并不断加载</li><li>12.查询DOM缓存</li></ul><h2 id="页面渲染优化" tabindex="-1"><a class="header-anchor" href="#页面渲染优化"><span>页面渲染优化</span></a></h2><ul><li>1.HTML文档结构层次尽量少，最好不深于六层；</li><li>2.脚本尽量后放，样式放在前即可；</li><li>3.少量首屏样式内联放在标签内；</li><li>4.样式结构层次尽量简单；</li><li>5.在脚本中尽量减少DOM操作，尽量缓存访问DOM的样式信息，避免过度触发回流；</li><li>6.减少通过JavaScript代码修改元素样式，尽量使用修改class名方式操作样式或动画；</li><li>7.动画尽量使用在绝对定位或固定定位的元素上；</li><li>8.隐藏在屏幕外，或在页面滚动时，尽量停止动画；</li><li>9.尽量缓存DOM查找，查找器尽量简洁；</li><li>10.涉及多域名的网站，可以开启域名预解析</li><li>11.尽早开始js执行</li><li>新增的点：2019-11-1 <ul><li>避免使用字符串拼接，尤其的DOM操作里的字符串拼接，字符串的不可变性；</li><li>面向对象写代码，避免出现闭包；使用bind改变指向；</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // var me = this;  这样会出现闭包，内存不会进行回收</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // bind改变指向，只是改变指向，但函数会绑定DOM节点上；</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">add_btn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>原公司代码实时数据代码优化：以前在公司这样写代码： <ul><li><p>调用<code>this.add();</code>：内部会产生闭包；</p></li><li><p>调用<code>this.render()</code>：内部会产生闭包；最恶心的是递归执行一次就会产生一次闭包；执行多次后页面就卡顿！！</p></li></ul></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>function FN(id) {</span></span>
<span class="line"><span>    this.box = document.querySelector(id);</span></span>
<span class="line"><span>    this.data = [&quot;测试数据&quot;];</span></span>
<span class="line"><span>    this.add();</span></span>
<span class="line"><span>    this.render();</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  FN.prototype = {</span></span>
<span class="line"><span>    add: function() {</span></span>
<span class="line"><span>      var me = this;</span></span>
<span class="line"><span>      me.box.onclick = function() {</span></span>
<span class="line"><span>        console.log(me.data);</span></span>
<span class="line"><span>      };</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    render: function() {</span></span>
<span class="line"><span>      var me = this;</span></span>
<span class="line"><span>      // 获取数据：</span></span>
<span class="line"><span>      var arr = [1, 2, 3];</span></span>
<span class="line"><span>      arr.forEach(function(item, index, arr) {</span></span>
<span class="line"><span>        console.log(item);</span></span>
<span class="line"><span>      });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      setTimeout(function() {</span></span>
<span class="line"><span>        me.render();</span></span>
<span class="line"><span>      }, 1000);</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  new FN();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修改this,避免闭包；</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> FN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">box</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;测试数据&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  FN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // var me = this;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">box</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    render</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // var me = this;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // 获取数据：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">      arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">      setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> FN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>改变this指向，不会产生闭包:</li></ul>`,31),p=[e];function t(h,d){return n(),i("div",null,p)}const c=s(l,[["render",t],["__file","性能优化.html.vue"]]),v=JSON.parse('{"path":"/frontEndInterview/%E6%A1%86%E6%9E%B6%E6%89%93%E5%8C%85/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","title":"页面性能","lang":"zh-CN","frontmatter":{"title":"页面性能","icon":"circle-info","description":"页面性能类 性能优化的原则 多使用内存缓存或其他方法 减少cpu计算量，减少网络加载耗时 适用所有编程的性能优化 空间换时间 加载更快 减少资源体积：压缩代码，gzip压缩 减少访问次数：合并代码，ssr服务段渲染，缓存 静态资源增加。资源合并 适用更快的网络：CDN加速 渲染更快 css放到head，js放到body下面 尽早开始执行js，用DOMC...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/frontEndInterview/%E6%A1%86%E6%9E%B6%E6%89%93%E5%8C%85/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"前端知识随笔"}],["meta",{"property":"og:title","content":"页面性能"}],["meta",{"property":"og:description","content":"页面性能类 性能优化的原则 多使用内存缓存或其他方法 减少cpu计算量，减少网络加载耗时 适用所有编程的性能优化 空间换时间 加载更快 减少资源体积：压缩代码，gzip压缩 减少访问次数：合并代码，ssr服务段渲染，缓存 静态资源增加。资源合并 适用更快的网络：CDN加速 渲染更快 css放到head，js放到body下面 尽早开始执行js，用DOMC..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-24T03:48:33.000Z"}],["meta",{"property":"article:author","content":"小安"}],["meta",{"property":"article:modified_time","content":"2024-06-24T03:48:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"页面性能\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-24T03:48:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小安\\",\\"url\\":\\"https://github.com/an31742\\"}]}"]]},"headers":[{"level":2,"title":"性能优化的原则","slug":"性能优化的原则","link":"#性能优化的原则","children":[{"level":3,"title":"加载更快","slug":"加载更快","link":"#加载更快","children":[]},{"level":3,"title":"渲染更快","slug":"渲染更快","link":"#渲染更快","children":[]}]},{"level":2,"title":"提升页面性能的方法有哪些？","slug":"提升页面性能的方法有哪些","link":"#提升页面性能的方法有哪些","children":[]},{"level":2,"title":"页面渲染优化","slug":"页面渲染优化","link":"#页面渲染优化","children":[]}],"git":{"createdTime":1719137021000,"updatedTime":1719200913000,"contributors":[{"name":"an31742","email":"2234170284@qq.com","commits":2}]},"readingTime":{"minutes":6.11,"words":1833},"filePathRelative":"frontEndInterview/框架打包/性能优化.md","localizedDate":"2024年6月23日","autoDesc":true}');export{c as comp,v as data};
