import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as r,e}from"./app-1_sQ8TOy.js";const n={},a=e("ol",null,[e("li",null,"抽象与解耦 ● 分离关注点：将业务逻辑与UI呈现解耦，组件只处理自身职责范围内的逻辑 ● 数据驱动：通过Props传入配置/数据，避免内部固化业务逻辑 ● 上下文隔离：不依赖外部全局状态，通过接口与外界通信"),e("li",null,"接口设计原则 ● 最小化Props接口：仅暴露必要参数，保持API简洁 ● 扩展性设计： ○ 提供renderXXX插槽（如renderFooter） ○ 支持children复合内容 ○ 预留扩展点（如customClassName） ● 类型约束：使用TypeScript定义严谨的Props契约"),e("li",null,"行为控制策略 ● 受控/非受控双模： ○ 同时支持value（受控）和defaultValue（非受控） ○ 内部维护兜底状态 ● 事件代理机制： ○ 统一的事件命名规范（onChange/onSubmit） ○ 透传原生事件对象"),e("li",null,"可配置化体系 ● 预设与覆盖： ○ 提供合理的默认配置 ○ 允许局部覆盖（如headerStyle覆盖容器样式） ● 主题方案： ○ 通过Context注入主题变量 ○ 支持CSS变量动态覆盖"),e("li",null,"自适应能力 ● 响应式处理： ○ 容器查询实现布局自适应 ○ 提供breakpoint配置点 ● 空状态处理：内置emptyState占位组件 ● 错误边界：封装组件级错误捕获机制"),e("li",null,"性能优化内建 ● 渲染控制： ○ 自动记忆化关键计算 ○ 细粒度上下文分割 ● 按需加载：动态导入重型子组件 ● DOM优化：被动事件监听等浏览器友好实现"),e("li",null,"可观测性增强 ● Ref透传：支持获取底层DOM实例 ● 调试模式：开发环境输出内部状态日志 ● 埋点插槽：预留性能监控/行为追踪接口"),e("li",null,"文档契约 ● 类型即文档：TS定义自描述接口 ● 预设值枚举：size: 'sm' | 'md' | 'lg' 等约束 ● 默认值显式声明：标明非必填项的默认行为 本质逻辑：通过严谨的接口约定 + 灵活的行为扩展 + 自包含的功能实现，构建可被不同业务场景安全消费的组件单元。其核心是平衡约定与自由的关系，既提供开箱即用的解决方案，又保留必要的定制能力。")],-1),i=[a];function l(p,c){return r(),o("div",null,i)}const d=t(n,[["render",l],["__file","封装高复用组件逻辑.html.vue"]]),u=JSON.parse('{"path":"/interview/%E5%B0%81%E8%A3%85%E9%AB%98%E5%A4%8D%E7%94%A8%E7%BB%84%E4%BB%B6%E9%80%BB%E8%BE%91.html","title":"封装高复用组件逻辑","lang":"zh-CN","frontmatter":{"title":"封装高复用组件逻辑","icon":"object-group","tag":["面试必考"],"description":"抽象与解耦 ● 分离关注点：将业务逻辑与UI呈现解耦，组件只处理自身职责范围内的逻辑 ● 数据驱动：通过Props传入配置/数据，避免内部固化业务逻辑 ● 上下文隔离：不依赖外部全局状态，通过接口与外界通信 接口设计原则 ● 最小化Props接口：仅暴露必要参数，保持API简洁 ● 扩展性设计： ○ 提供renderXXX插槽（如renderFoote...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/interview/%E5%B0%81%E8%A3%85%E9%AB%98%E5%A4%8D%E7%94%A8%E7%BB%84%E4%BB%B6%E9%80%BB%E8%BE%91.html"}],["meta",{"property":"og:site_name","content":"前端知识随笔"}],["meta",{"property":"og:title","content":"封装高复用组件逻辑"}],["meta",{"property":"og:description","content":"抽象与解耦 ● 分离关注点：将业务逻辑与UI呈现解耦，组件只处理自身职责范围内的逻辑 ● 数据驱动：通过Props传入配置/数据，避免内部固化业务逻辑 ● 上下文隔离：不依赖外部全局状态，通过接口与外界通信 接口设计原则 ● 最小化Props接口：仅暴露必要参数，保持API简洁 ● 扩展性设计： ○ 提供renderXXX插槽（如renderFoote..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-06T17:24:01.000Z"}],["meta",{"property":"article:author","content":"小安"}],["meta",{"property":"article:tag","content":"面试必考"}],["meta",{"property":"article:modified_time","content":"2025-08-06T17:24:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"封装高复用组件逻辑\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-06T17:24:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小安\\",\\"url\\":\\"https://github.com/an31742\\"}]}"]]},"headers":[],"git":{"createdTime":1754501041000,"updatedTime":1754501041000,"contributors":[{"name":"an31742","email":"2234170284@qq.com","commits":1}]},"readingTime":{"minutes":1.93,"words":580},"filePathRelative":"interview/封装高复用组件逻辑.md","localizedDate":"2025年8月6日","autoDesc":true}');export{d as comp,u as data};
