import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as l,a as r}from"./app-1_sQ8TOy.js";const i={},n=r(`<h3 id="浏览器渲染过程" tabindex="-1"><a class="header-anchor" href="#浏览器渲染过程"><span>浏览器渲染过程</span></a></h3><ul><li>1.HTML解析出DOM Tree</li><li>2.CSS解析出Style Rules</li><li>3.将二者关联生成Render Tree</li><li>4.布局layout根据Render Tree计算每个节点的信息，就是计算出每个节点的信息；</li><li>5.Painting 根据计算好的信息绘制整个页面</li></ul><h3 id="render-tree" tabindex="-1"><a class="header-anchor" href="#render-tree"><span>Render Tree</span></a></h3><ul><li>Render Tree的构建其实就是DOM Tree和CSSOM Attach的过程。【Attach：附加，关联】</li></ul><h3 id="布局layout" tabindex="-1"><a class="header-anchor" href="#布局layout"><span>布局Layout</span></a></h3><ul><li>创建渲染树后，下一步就是布局（Layout）,或者叫回流（reflow,relayout），这个过程就是通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸，将其安置在浏览器窗口的正确位置，而有些时候我们会在文档布局完成后对DOM进行修改，这时候可能需要重新进行布局，也可称其为回流，本质上还是一个布局的过程，每一个渲染对象都有一个布局或者回流方法，实现其布局或回流。</li><li>对渲染树的布局可以分为全局和局部的，全局即对整个渲染树进行重新布局，如当我们改变了窗口尺寸或方向或者是修改了根元素的尺寸或者字体大小等；而局部布局可以是对渲染树的某部分或某一个渲染对象进行重新布局。</li></ul><h3 id="绘制painting" tabindex="-1"><a class="header-anchor" href="#绘制painting"><span>绘制Painting</span></a></h3><ul><li>在绘制阶段，系统会遍历呈现树，并调用呈现器的“paint”方法，将呈现器的内容显示在屏幕上。</li></ul><h3 id="重绘repaint" tabindex="-1"><a class="header-anchor" href="#重绘repaint"><span>重绘Repaint</span></a></h3><ul><li>屏幕的一部分要重画，比如某个CSS的背景色变了。但是元素的几何尺寸没有变。</li></ul><h3 id="回流reflow" tabindex="-1"><a class="header-anchor" href="#回流reflow"><span>回流Reflow</span></a></h3><ul><li>元件的几何尺寸变了，我们需要重新验证并计算Render Tree。是Render Tree的一部分或全部发生了变化。这就是Reflow，或是Layout。</li><li>Reflow的成本比Repaint的成本高得多的多。DOM Tree里的每个结点都会有reflow方法，一个结点的reflow很有可能导致子结点，甚至父点以及同级结点的reflow。在一些高性能的电脑上也许还没什么，但是如果reflow发生在手机上，那么这个过程是非常痛苦和耗电的。 所以，下面这些动作有很大可能会是成本比较高的。</li></ul><hr><h3 id="脚本处理" tabindex="-1"><a class="header-anchor" href="#脚本处理"><span>脚本处理</span></a></h3><ul><li>浏览器解析文档，当遇到<code>&lt;script&gt;</code>标签的时候，会立即解析脚本，停止解析文档</li><li>因为JS可能会改动DOM和CSS，所以继续解析会造成浪费。</li><li>如果脚本是外部的，会等待脚本下载完毕，再继续解析文档。现在可以在script标签上增加属性 defer或者async。(就是一起解析了？)脚本解析会将脚本中改变DOM和CSS的地方分别解析出来，追加到DOM Tree和Style Rules上。</li><li>JS为什么放在下面？DOM树，CSSOM树已经完成了，即使有DOM改动，也不会在页面等待时间上有所显示；因为JS的异步的的修改都是单独拿出来进行渲染的；</li></ul><h3 id="css优先级" tabindex="-1"><a class="header-anchor" href="#css优先级"><span>CSS优先级</span></a></h3><ul><li>优先级：浏览器默认设置&lt;用户设置&lt;外部样式&lt;内联样式&lt;HTML中的style样式；</li></ul><h3 id="何时执行" tabindex="-1"><a class="header-anchor" href="#何时执行"><span>何时执行</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> (1)window.onload方法是在网页中所有的元素(包括元素的所有关联文件)完全加载到浏览器后才执行的。</span></span>
<span class="line"><span> (2)$(document).ready() 方法可以在DOM载入就绪时,就调用执行绑定的函数。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,19),a=[n];function s(d,o){return l(),t("div",null,a)}const p=e(i,[["render",s],["__file","html-css-render.html.vue"]]),u=JSON.parse('{"path":"/frontEndInterview/html/html-css-render.html","title":"html-css-render","lang":"zh-CN","frontmatter":{"title":"html-css-render","icon":"circle-info","description":"浏览器渲染过程 1.HTML解析出DOM Tree 2.CSS解析出Style Rules 3.将二者关联生成Render Tree 4.布局layout根据Render Tree计算每个节点的信息，就是计算出每个节点的信息； 5.Painting 根据计算好的信息绘制整个页面 Render Tree Render Tree的构建其实就是DOM Tre...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/frontEndInterview/html/html-css-render.html"}],["meta",{"property":"og:site_name","content":"前端知识随笔"}],["meta",{"property":"og:title","content":"html-css-render"}],["meta",{"property":"og:description","content":"浏览器渲染过程 1.HTML解析出DOM Tree 2.CSS解析出Style Rules 3.将二者关联生成Render Tree 4.布局layout根据Render Tree计算每个节点的信息，就是计算出每个节点的信息； 5.Painting 根据计算好的信息绘制整个页面 Render Tree Render Tree的构建其实就是DOM Tre..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T10:03:41.000Z"}],["meta",{"property":"article:author","content":"小安"}],["meta",{"property":"article:modified_time","content":"2024-06-23T10:03:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"html-css-render\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-23T10:03:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小安\\",\\"url\\":\\"https://github.com/an31742\\"}]}"]]},"headers":[{"level":3,"title":"浏览器渲染过程","slug":"浏览器渲染过程","link":"#浏览器渲染过程","children":[]},{"level":3,"title":"Render Tree","slug":"render-tree","link":"#render-tree","children":[]},{"level":3,"title":"布局Layout","slug":"布局layout","link":"#布局layout","children":[]},{"level":3,"title":"绘制Painting","slug":"绘制painting","link":"#绘制painting","children":[]},{"level":3,"title":"重绘Repaint","slug":"重绘repaint","link":"#重绘repaint","children":[]},{"level":3,"title":"回流Reflow","slug":"回流reflow","link":"#回流reflow","children":[]},{"level":3,"title":"脚本处理","slug":"脚本处理","link":"#脚本处理","children":[]},{"level":3,"title":"CSS优先级","slug":"css优先级","link":"#css优先级","children":[]},{"level":3,"title":"何时执行","slug":"何时执行","link":"#何时执行","children":[]}],"git":{"createdTime":1719137021000,"updatedTime":1719137021000,"contributors":[{"name":"an31742","email":"2234170284@qq.com","commits":1}]},"readingTime":{"minutes":2.95,"words":886},"filePathRelative":"frontEndInterview/html/html-css-render.md","localizedDate":"2024年6月23日","autoDesc":true}');export{p as comp,u as data};
