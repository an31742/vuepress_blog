import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as e,a as t}from"./app-D1s-CSjg.js";const n={},i=t(`<h6 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h6><ul><li>Day.js 是代替修改本地Date.prototype，Day.js对Date对象进行了封装，只需要调用Dayjs()即可。</li><li>相对moment.js而已，day.js的体积更小，只有2KB左右；moment.min.js 有16.7KB。</li><li>对应普通项目来说，对应时间的操作就只有那么几个（格式化、查询、计算），这些基于Day.js完全足够。并且Day.js的文档相对简单、清晰！</li></ul><p><a href="https://blog.csdn.net/halo1416/article/details/83620022" target="_blank" rel="noopener noreferrer">该文章对比之前的moment.js的文章</a><a href="https://dayjs.fenxianglu.cn/category/#node-js" target="_blank" rel="noopener noreferrer">Day.js官方文档</a></p><p><strong>当前文章很多实例是以当前时间来处理的， 当前时间为：2022-04-20</strong></p><h6 id="_1-初始化日期-时间" tabindex="-1"><a class="header-anchor" href="#_1-初始化日期-时间"><span>1. 初始化日期 / 时间</span></a></h6><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dayjs().format(&#39;YYYY-MM-DD&#39;);		    // 初始化日期</span></span>
<span class="line"><span>dayjs().format(&#39;YYYY-MM-DD HH:mm:ss&#39;);  // 初始化日期时间</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2-格式化日期-时间" tabindex="-1"><a class="header-anchor" href="#_2-格式化日期-时间"><span>2. 格式化日期 / 时间</span></a></h6><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dayjs(value).format(&#39;YYYY-MM-DD&#39;);			// 初始化日期</span></span>
<span class="line"><span>dayjs(value).format(&#39;YYYY-MM-DD HH:mm:ss&#39;); // 初始化日期时间</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3-加-减" tabindex="-1"><a class="header-anchor" href="#_3-加-减"><span>3. 加 / 减</span></a></h6><p>dayjs().add / dayjs().subtract 代表在当前时间上去加减； dayjs(value).add / dayjs(value).subtract 代表在指定时间（value）上去加减；</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dayjs().add(7, &#39;day&#39;).format(&#39;YYYY-MM-DD&#39;);   // 2022-04-27 今天（2022-04-20）加上7天</span></span>
<span class="line"><span>dayjs().add(1, &#39;month&#39;).format(&#39;YYYY-MM-DD&#39;);   // 2022-05-20 今天（2022-04-20）加上一月</span></span>
<span class="line"><span></span></span>
<span class="line"><span>dayjs().subtract(2, &#39;year&#39;).format(&#39;YYYY-MM-DD&#39;);   // 2020-05-20 今天（2022-04-20）减去2年</span></span>
<span class="line"><span>dayjs().subtract(2, &#39;hour&#39;).format(&#39;YYYY-MM-DD HH:mm:ss&#39;);   // 2022-04-20 14:03:39 今天现在（2022-04-20 16:03:39）减去2小时</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>所有可用单位列表：</strong></p><table><thead><tr><th><strong>单位</strong></th><th><strong>缩写</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>week</td><td>w</td><td>周</td></tr><tr><td>day</td><td>d</td><td>星期(星期日0，星期六6)</td></tr><tr><td>month</td><td>M</td><td>月份(0-11)</td></tr><tr><td>year</td><td>y</td><td>年</td></tr><tr><td>hour</td><td>h</td><td>小时</td></tr><tr><td>minute</td><td>m</td><td>分钟</td></tr><tr><td>second</td><td>s</td><td>秒</td></tr><tr><td>millisecond</td><td>ms</td><td>毫秒</td></tr></tbody></table><h6 id="_4-获取某年某月的第一天或最后一天" tabindex="-1"><a class="header-anchor" href="#_4-获取某年某月的第一天或最后一天"><span>4. 获取某年某月的第一天或最后一天</span></a></h6><p><strong>获取某年某月的第一天</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dayjs().startOf(&#39;year&#39;).format(&#39;YYYY-MM-DD HH:mm:ss&#39;)   // 2022-01-01 00:00:00  =&gt; 第一天格式化出来的时分秒都是0</span></span>
<span class="line"><span>dayjs().startOf(&#39;month&#39;).format(&#39;YYYY-MM-DD&#39;)   // 2022-04-01</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取某年某月的最后一天</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dayjs().endOf(&#39;year&#39;).format(&#39;YYYY-MM-DD HH:mm:ss&#39;)   // 2022-12-31 23:59:59  =&gt; 最后时间 格式化出来的时分秒是23:59:59</span></span>
<span class="line"><span>dayjs().endOf(&#39;month&#39;).format(&#39;YYYY-MM-DD&#39;)   // 2022-04-30</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_5-获取星期几" tabindex="-1"><a class="header-anchor" href="#_5-获取星期几"><span>5. 获取星期几</span></a></h6><p>dayjs().day() : 返回0(星期日)到6(星期六)的数字 设置时也只能接受 0-6 的数字： dayjs().day(6).format(&#39;YYYY-MM-DD&#39;)：获取最近周六的日期 =&gt; 2022-04-23 dayjs().day(0).format(&#39;YYYY-MM-DD&#39;)：获取最近周日的日期 =&gt; 2022-04-17</p><h6 id="_6-获取毫秒数" tabindex="-1"><a class="header-anchor" href="#_6-获取毫秒数"><span>6. 获取毫秒数</span></a></h6><p>dayjs(&#39;2019-01-25&#39;).valueOf() 或 dayjs().valueOf()</p><h6 id="_7-获取时间差-默认输出的差值单位是毫秒" tabindex="-1"><a class="header-anchor" href="#_7-获取时间差-默认输出的差值单位是毫秒"><span>7. 获取时间差（默认输出的差值单位是毫秒）</span></a></h6><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dayjs(&#39;2019-01-25&#39;).diff(&#39;2018-06-05&#39;, &#39;month&#39;);         // 7</span></span>
<span class="line"><span>dayjs(&#39;2019-01-25&#39;).diff(dayjs(&#39;2018-06-05&#39;), &#39;month&#39;);  // 7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>所有可用输出单位列表：</strong></p><table><thead><tr><th><strong>单位</strong></th><th><strong>缩写</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>week</td><td>w</td><td>周</td></tr><tr><td>day</td><td>d</td><td>星期(星期日0，星期六6)</td></tr><tr><td>month</td><td>M</td><td>月份(0-11)</td></tr><tr><td>year</td><td>y</td><td>年</td></tr><tr><td>hour</td><td>h</td><td>小时</td></tr><tr><td>minute</td><td>m</td><td>分钟</td></tr><tr><td>second</td><td>s</td><td>秒</td></tr><tr><td>millisecond</td><td>ms</td><td>毫秒（默认输出单位）</td></tr></tbody></table><h6 id="_8-获取时、分、秒" tabindex="-1"><a class="header-anchor" href="#_8-获取时、分、秒"><span>8. 获取时、分、秒</span></a></h6><p>当前时间：<strong>2022-04-20 16:55:55</strong> ； 以下大部分方法都会往前溢出；如毫秒超过999，将持续到秒；秒超过59，将持续到分，这边情况在设置时特别突出！</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>console.log(&#39;-----获取年&#39;, dayjs().year());    // ==&gt;&gt; 2022</span></span>
<span class="line"><span>    console.log(&#39;-----获取月&#39;, dayjs().month());   // 0到11的数字 ==&gt;&gt; 3</span></span>
<span class="line"><span>    console.log(&#39;-----获取星期&#39;, dayjs().day());   // 0(星期日)到6(星期六)的数字 ==&gt;&gt; 3</span></span>
<span class="line"><span>    console.log(&#39;-----获取天&#39;, dayjs().date());    // 1到31的数字 ==&gt;&gt; 20</span></span>
<span class="line"><span>    console.log(&#39;-----获取小时&#39;, dayjs().hour());  // 0到23的数字 ==&gt;&gt; 16</span></span>
<span class="line"><span>    console.log(&#39;-----获取分钟&#39;, dayjs().minute());// 0到59的数字 ==&gt;&gt; 55</span></span>
<span class="line"><span>    console.log(&#39;-----获取秒&#39;, dayjs().second());  // 0到59的数字 ==&gt;&gt; 55</span></span>
<span class="line"><span>    console.log(&#39;-----获取毫秒&#39;, dayjs().millisecond());  // 0到999的数字 ==&gt;&gt; 333</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_9-将毫秒转为时分秒" tabindex="-1"><a class="header-anchor" href="#_9-将毫秒转为时分秒"><span>9. 将毫秒转为时分秒</span></a></h6><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 下面毫秒数代表：2022-04-20 17:43:20</span></span>
<span class="line"><span>const timestr = 1650447800731;   // 毫秒值必须是number类型，如果是string，结果可能和你想的不一样</span></span>
<span class="line"><span>console.log(&#39;将毫秒转为年-月-日 时:分:秒&#39;, dayjs(timestr).format(&#39;YYYY-MM-DD HH:mm:ss&#39;));</span></span>
<span class="line"><span>console.log(&#39;获取年&#39;, dayjs(timestr).year()); // </span></span>
<span class="line"><span>console.log(&#39;获取月&#39;, dayjs(timestr).month());</span></span>
<span class="line"><span>console.log(&#39;获取天&#39;, dayjs(timestr).date());</span></span>
<span class="line"><span>console.log(&#39;获取时&#39;, dayjs(timestr).hour());</span></span>
<span class="line"><span>console.log(&#39;获取分&#39;, dayjs(timestr).minute());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：这里 year()、month()、date()、hour()、minute()、second()、millisecond() 等方法均可使用</p><h6 id="_10-判断一个日期是否在另外一个日期之后-isafter" tabindex="-1"><a class="header-anchor" href="#_10-判断一个日期是否在另外一个日期之后-isafter"><span>10. 判断一个日期是否在另外一个日期之后 isAfter</span></a></h6><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// day.js 为 2022-04-20</span></span>
<span class="line"><span>console.log(&#39;isAfter&#39;, dayjs().isAfter(dayjs(&#39;2011-01-01&#39;))) 			 	// true</span></span>
<span class="line"><span>console.log(&#39;isAfter&#39;, dayjs(&#39;2022-04-20&#39;).isAfter(dayjs(&#39;2022-04-21&#39;)))	// false</span></span>
<span class="line"><span>console.log(&#39;isAfter&#39;, dayjs(&#39;2022-04-20&#39;).isAfter(dayjs(&#39;2022-04-20&#39;)))	// 相同也为false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_11-判断一个日期是否在另外一个日期之前-isbefore" tabindex="-1"><a class="header-anchor" href="#_11-判断一个日期是否在另外一个日期之前-isbefore"><span>11. 判断一个日期是否在另外一个日期之前 isBefore</span></a></h6><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// day.js 为 2022-04-20</span></span>
<span class="line"><span>console.log(&#39;isBefore&#39;, dayjs().isBefore(dayjs(&#39;2011-01-01&#39;)))             // false</span></span>
<span class="line"><span>console.log(&#39;isBefore&#39;, dayjs(&#39;2022-04-20&#39;).isBefore(dayjs(&#39;2022-04-21&#39;))) // true</span></span>
<span class="line"><span>console.log(&#39;isBefore&#39;, dayjs(&#39;2022-04-20&#39;).isBefore(dayjs(&#39;2022-04-20&#39;))) // 日期相同时也为false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_12-判断两个日期是否相同-issame" tabindex="-1"><a class="header-anchor" href="#_12-判断两个日期是否相同-issame"><span>12. 判断两个日期是否相同 isSame</span></a></h6><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// day.js 为 2022-04-20</span></span>
<span class="line"><span>console.log(&#39;isSame&#39;, dayjs().isSame(dayjs(&#39;2011-01-01&#39;)))  			// false</span></span>
<span class="line"><span>console.log(&#39;isSame&#39;, dayjs(&#39;2022-04-20&#39;).isSame(dayjs(&#39;2022-04-21&#39;)))	// false</span></span>
<span class="line"><span>console.log(&#39;isSame&#39;, dayjs(&#39;2022-04-20&#39;).isSame(dayjs(&#39;2022-04-20&#39;)))	// true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_13-判断一个日期是否在两个日期之间-isbetween" tabindex="-1"><a class="header-anchor" href="#_13-判断一个日期是否在两个日期之间-isbetween"><span>13. 判断一个日期是否在两个日期之间 isBetween</span></a></h6><p><strong>注意:</strong> 此功能依赖IsBetween插件 此处也将演示如何使用 Day.js 的插件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>import dayjs from &#39;dayjs&#39;	// 引入dayjs</span></span>
<span class="line"><span>import isBetween from &#39;dayjs/plugin/isBetween&#39;	// 引入相关插件</span></span>
<span class="line"><span></span></span>
<span class="line"><span>created() {</span></span>
<span class="line"><span>   dayjs.extend(isBetween); // 挂载插件</span></span>
<span class="line"><span>   // 使用插件</span></span>
<span class="line"><span>   console.log(&#39;isBetween&#39;, dayjs(&#39;2010-10-20&#39;).isBetween(&#39;2010-10-19&#39;, dayjs(&#39;2010-10-25&#39;)) )</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Day.js 里面有 相同或之前 IsSameOrBefore 和 相同或之后 IsSameOrAfter的方法，可根据实际需求取用，但这两个方法需要依赖相应的插件！</strong><strong>注意：</strong> isAfter、isBefore、isSame、IsBetween 默认都是通过将日期转为milliseconds去比较的，所以这两个方法有第二个参数。即指定比较的粒度 console.log(&#39;isBefore&#39;, dayjs(&#39;2022-04-20&#39;).isBefore(&#39;2015-01-01&#39;, &#39;year&#39;)) 所有可用单位列表：</p><table><thead><tr><th><strong>单位</strong></th><th><strong>缩写</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>date</td><td>D</td><td>天00:00</td></tr><tr><td>day</td><td>d</td><td>星期00:00</td></tr><tr><td>month</td><td>M</td><td>月第一天00:00</td></tr><tr><td>year</td><td>y</td><td>1月1日00点</td></tr><tr><td>week</td><td>w</td><td>周第一天00:00</td></tr><tr><td>isoWeek</td><td></td><td>周(ISO)</td></tr><tr><td>hour</td><td>h</td><td>小时 00:00:00</td></tr><tr><td>minute</td><td>m</td><td>分钟 00:00</td></tr><tr><td>second</td><td>s</td><td>秒 00</td></tr><tr><td>millisecond</td><td>ms</td><td>毫秒（默认比较单位）0</td></tr></tbody></table><p>更多详细用法请参阅 <a href="https://dayjs.fenxianglu.cn/category/#node-js" target="_blank" rel="noopener noreferrer">官方文档</a></p>`,44),d=[i];function r(l,o){return e(),a("div",null,d)}const c=s(n,[["render",r],["__file","Day.js 常用方法.html.vue"]]),m=JSON.parse('{"path":"/businessProblem/%E6%96%B0%E7%9F%A5%E8%AF%86/Day.js%20%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.html","title":"Day.js 常用方法","lang":"zh-CN","frontmatter":{"title":"Day.js 常用方法","icon":"circle-info","description":"前言 Day.js 是代替修改本地Date.prototype，Day.js对Date对象进行了封装，只需要调用Dayjs()即可。 相对moment.js而已，day.js的体积更小，只有2KB左右；moment.min.js 有16.7KB。 对应普通项目来说，对应时间的操作就只有那么几个（格式化、查询、计算），这些基于Day.js完全足够。并且D...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/businessProblem/%E6%96%B0%E7%9F%A5%E8%AF%86/Day.js%20%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"前端知识随笔"}],["meta",{"property":"og:title","content":"Day.js 常用方法"}],["meta",{"property":"og:description","content":"前言 Day.js 是代替修改本地Date.prototype，Day.js对Date对象进行了封装，只需要调用Dayjs()即可。 相对moment.js而已，day.js的体积更小，只有2KB左右；moment.min.js 有16.7KB。 对应普通项目来说，对应时间的操作就只有那么几个（格式化、查询、计算），这些基于Day.js完全足够。并且D..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-25T10:37:49.000Z"}],["meta",{"property":"article:author","content":"小安"}],["meta",{"property":"article:modified_time","content":"2024-06-25T10:37:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day.js 常用方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-25T10:37:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小安\\",\\"url\\":\\"https://github.com/an31742\\"}]}"]]},"headers":[],"git":{"createdTime":1719311869000,"updatedTime":1719311869000,"contributors":[{"name":"an31742","email":"2234170284@qq.com","commits":1}]},"readingTime":{"minutes":5.01,"words":1504},"filePathRelative":"businessProblem/新知识/Day.js 常用方法.md","localizedDate":"2024年6月25日","autoDesc":true}');export{c as comp,m as data};
