import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as n}from"./app-1_sQ8TOy.js";const e={},l=n(`<h3 id="事件循环-event-loop-核心概念" tabindex="-1"><a class="header-anchor" href="#事件循环-event-loop-核心概念"><span>事件循环（Event Loop）核心概念</span></a></h3><p><strong>本质</strong>：JavaScript 单线程运行时处理异步任务的<strong>调度机制</strong>，通过循环监控任务队列实现非阻塞执行。</p><hr><h3 id="任务队列-task-queue-分层模型" tabindex="-1"><a class="header-anchor" href="#任务队列-task-queue-分层模型"><span>任务队列（Task Queue）分层模型</span></a></h3><ol><li><p><strong>宏任务队列（Macrotask Queue）</strong></p><ul><li>来源：宿主环境触发的任务</li><li>包含： <ul><li><code>setTimeout</code> / <code>setInterval</code></li><li>I/O 操作（文件/网络）</li><li>DOM 事件回调（点击/滚动）</li><li><code>requestAnimationFrame</code>（浏览器）</li><li><code>setImmediate</code>（Node.js）</li></ul></li><li><strong>执行规则</strong>：每轮事件循环<strong>只取一个</strong>宏任务执行</li></ul></li><li><p><strong>微任务队列（Microtask Queue）</strong></p><ul><li>来源：JavaScript 引擎生成的任务</li><li>包含： <ul><li><code>Promise.then</code>/<code>catch</code>/<code>finally</code></li><li><code>MutationObserver</code>（DOM 变更监听）</li><li><code>queueMicrotask</code> API</li><li><code>process.nextTick</code>（Node.js，优先级最高）</li></ul></li><li><strong>执行规则</strong>：每轮事件循环<strong>清空整个</strong>微任务队列</li></ul></li></ol><hr><h3 id="执行流程-浏览器环境" tabindex="-1"><a class="header-anchor" href="#执行流程-浏览器环境"><span>执行流程（浏览器环境）</span></a></h3><div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" data-title="mermaid" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">graph LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">A[执行同步代码] --&gt; B[调用栈清空?]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">B --&gt;|是| C{检查微任务队列}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">C --&gt;|有任务| D[执行所有微任务]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">D --&gt; C</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">C --&gt;|空| E[渲染DOM更新]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">E --&gt; F{检查宏任务队列}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">F --&gt;|有任务| G[取一个宏任务执行]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">G --&gt; A</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">F --&gt;|空| H[等待新任务]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="关键步骤解析" tabindex="-1"><a class="header-anchor" href="#关键步骤解析"><span>关键步骤解析：</span></a></h4><ol><li><strong>同步代码执行</strong>：主线程执行完所有同步任务</li><li><strong>微任务清算阶段</strong>： <ul><li>执行<strong>所有</strong>微任务队列中的任务</li><li>微任务执行中产生的新微任务<strong>立即加入当前队列</strong></li><li>直到微任务队列完全清空</li></ul></li><li><strong>UI渲染</strong>（非必须）：浏览器决定是否进行 DOM 渲染</li><li><strong>宏任务提取</strong>：从宏任务队列中取出<strong>最早的一个</strong>任务执行</li><li><strong>循环重启</strong>：回到步骤1开始新的事件循环</li></ol><hr><h3 id="经典执行顺序案例" tabindex="-1"><a class="header-anchor" href="#经典执行顺序案例"><span>经典执行顺序案例</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;同步1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;宏任务1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;微任务1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;微任务2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">queueMicrotask</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;微任务3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;同步2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/* 输出顺序：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   同步1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   同步2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   微任务1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   微任务3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   微任务2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   宏任务1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="执行过程拆解" tabindex="-1"><a class="header-anchor" href="#执行过程拆解"><span>执行过程拆解：</span></a></h4><ol><li>执行同步代码：打印 <code>同步1</code> → <code>同步2</code></li><li>清空微任务队列： <ul><li>执行 Promise.then：打印 <code>微任务1</code></li><li>执行 queueMicrotask：打印 <code>微任务3</code></li><li>执行 Promise 链式 then：打印 <code>微任务2</code></li></ul></li><li>执行下一个宏任务：打印 <code>宏任务1</code></li></ol><hr><h3 id="特殊场景规则" tabindex="-1"><a class="header-anchor" href="#特殊场景规则"><span>特殊场景规则</span></a></h3><ol><li><p><strong>微任务优先级</strong>：</p><ul><li><code>process.nextTick</code> &gt; <code>Promise.then</code>（Node.js）</li><li>同类型微任务按入队顺序执行</li></ul></li><li><p><strong>渲染时机</strong>：</p><ul><li>在微任务执行后，宏任务执行前</li><li><code>requestAnimationFrame</code> 属于渲染前执行的宏任务</li></ul></li><li><p><strong>阻塞警告</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 错误示例：微任务死循环将阻塞主线程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> blockLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">blockLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h3 id="设计意义与最佳实践" tabindex="-1"><a class="header-anchor" href="#设计意义与最佳实践"><span>设计意义与最佳实践</span></a></h3><ol><li><strong>用户响应优先</strong>：微任务机制确保高优先级操作（如 Promise）先于 UI 渲染和宏任务执行</li><li><strong>性能优化原则</strong>： <ul><li>耗时操作拆解为多个宏任务（避免阻塞渲染）</li><li>状态更新等高频操作使用微任务（避免布局抖动）</li></ul></li><li><strong>框架应用</strong>： <ul><li>Vue 的 <code>nextTick</code> 优先使用微任务实现异步更新</li><li>React 调度器基于宏任务分片执行机制</li></ul></li></ol><blockquote><p><strong>核心要诀</strong>：<br><strong>同步代码 → 清空微任务 → 渲染 → 取宏任务 → 循环</strong><br> 微任务在<strong>同轮循环</strong>清算，宏任务在<strong>下轮循环</strong>执行</p></blockquote>`,22),t=[l];function h(r,p){return a(),s("div",null,t)}const o=i(e,[["render",h],["__file","事件循环.html.vue"]]),c=JSON.parse('{"path":"/interview/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.html","title":"事件循环","lang":"zh-CN","frontmatter":{"title":"事件循环","icon":"object-group","tag":["面试必考"],"description":"事件循环（Event Loop）核心概念 本质：JavaScript 单线程运行时处理异步任务的调度机制，通过循环监控任务队列实现非阻塞执行。 任务队列（Task Queue）分层模型 宏任务队列（Macrotask Queue） 来源：宿主环境触发的任务 包含： setTimeout / setInterval I/O 操作（文件/网络） DOM 事...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/interview/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.html"}],["meta",{"property":"og:site_name","content":"前端知识随笔"}],["meta",{"property":"og:title","content":"事件循环"}],["meta",{"property":"og:description","content":"事件循环（Event Loop）核心概念 本质：JavaScript 单线程运行时处理异步任务的调度机制，通过循环监控任务队列实现非阻塞执行。 任务队列（Task Queue）分层模型 宏任务队列（Macrotask Queue） 来源：宿主环境触发的任务 包含： setTimeout / setInterval I/O 操作（文件/网络） DOM 事..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-06T17:24:01.000Z"}],["meta",{"property":"article:author","content":"小安"}],["meta",{"property":"article:tag","content":"面试必考"}],["meta",{"property":"article:modified_time","content":"2025-08-06T17:24:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事件循环\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-06T17:24:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小安\\",\\"url\\":\\"https://github.com/an31742\\"}]}"]]},"headers":[{"level":3,"title":"事件循环（Event Loop）核心概念","slug":"事件循环-event-loop-核心概念","link":"#事件循环-event-loop-核心概念","children":[]},{"level":3,"title":"任务队列（Task Queue）分层模型","slug":"任务队列-task-queue-分层模型","link":"#任务队列-task-queue-分层模型","children":[]},{"level":3,"title":"执行流程（浏览器环境）","slug":"执行流程-浏览器环境","link":"#执行流程-浏览器环境","children":[]},{"level":3,"title":"经典执行顺序案例","slug":"经典执行顺序案例","link":"#经典执行顺序案例","children":[]},{"level":3,"title":"特殊场景规则","slug":"特殊场景规则","link":"#特殊场景规则","children":[]},{"level":3,"title":"设计意义与最佳实践","slug":"设计意义与最佳实践","link":"#设计意义与最佳实践","children":[]}],"git":{"createdTime":1754501041000,"updatedTime":1754501041000,"contributors":[{"name":"an31742","email":"2234170284@qq.com","commits":1}]},"readingTime":{"minutes":2.73,"words":819},"filePathRelative":"interview/事件循环.md","localizedDate":"2025年8月6日","autoDesc":true}');export{o as comp,c as data};
