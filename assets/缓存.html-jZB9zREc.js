import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,a as l}from"./app-z9-e5jPU.js";const s={},n=l(`<h1 id="缓存类" tabindex="-1"><a class="header-anchor" href="#缓存类"><span>缓存类</span></a></h1><h3 id="原因" tabindex="-1"><a class="header-anchor" href="#原因"><span>原因</span></a></h3><ul><li>1.请求更快：通过将内容缓存在本地浏览器或距离最近的缓存服务器（如CDN），在不影响网站交互的前提下可以大大加快网站加载速度。 减少体积和数量</li><li>2.节省带宽：对于已缓存的文件，可以减少请求带宽甚至无需请求网络。</li><li>3.降低服务器压力：在大量用户并发请求的情况下，服务器的性能受到限制，此时将一些静态资源放置在网络的多个节点，可以起到均衡负载的作用，降低服务器的压力。</li></ul><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h3><ul><li>缓存分为服务端侧（server side，比如 Nginx、Apache），常用的服务端缓存有CDN缓存；</li><li>客户端侧（client side，比如 web browser）客户端缓存就是指浏览器缓存。</li></ul><h3 id="种类" tabindex="-1"><a class="header-anchor" href="#种类"><span>种类</span></a></h3><ul><li>静态资源  img js css</li></ul><hr><h1 id="浏览器缓存" tabindex="-1"><a class="header-anchor" href="#浏览器缓存"><span>浏览器缓存</span></a></h1><h3 id="类型" tabindex="-1"><a class="header-anchor" href="#类型"><span>类型：</span></a></h3><ul><li>【强缓存】：浏览器在加载资源时，先根据这个资源的一些http header判断它是否命中强缓存，强缓存如果命中，浏览器直接从自己的缓存中读取资源，不会发请求到服务器。</li><li>【协商缓存】：当强缓存没有命中的时候，浏览器一定会发送一个请求到服务器，通过服务器端依据资源的另外一些http header验证这个资源是否命中协商缓存，如果协商缓存命中，服务器会将这个请求返回（304），但是不会返回这个资源的数据，而是告诉客户端可以直接从缓存中加载这个资源，于是浏览器就又会从自己的缓存中去加载这个资源；若未命中请求，则将资源返回客户端，并更新本地缓存数据（200）。</li><li>强缓存与协商缓存区别：强缓存不发请求到服务器，协商缓存会发请求到服务器。</li></ul><h3 id="设置" tabindex="-1"><a class="header-anchor" href="#设置"><span>设置：</span></a></h3><h3 id="_1-meta标签控制缓存-非http协议定义" tabindex="-1"><a class="header-anchor" href="#_1-meta标签控制缓存-非http协议定义"><span>1.Meta标签控制缓存（非HTTP协议定义）</span></a></h3><ul><li><code>&lt;META HTTP-EQUIV=&quot;Pragma&quot; CONTENT=&quot;no-cache&quot;&gt;</code></li><li>上述代码的作用是告诉浏览器当前页面不被缓存，每次访问都需要去服务器拉取。这种方法使用上很简单，但只有部分浏览器可以支持，而且所有缓存代理服务器都不支持，因为代理不解析HTML内容本身。</li><li>meta标签设置的过期时间和缓存控制是前后端不分家的时候服务器模板引擎注入使用的。现在先后分家是用使用服务器对请求的资源进行响应头设置强缓和协商缓存；</li></ul><h3 id="_2-http头信息控制缓存" tabindex="-1"><a class="header-anchor" href="#_2-http头信息控制缓存"><span>2.HTTP头信息控制缓存</span></a></h3><ul><li>HTTP头信息控制缓存是通过Expires（强缓存）、Cache-control（强缓存）、Last-Modified/If-Modified-Since（协商缓存）、Etag/If-None-Match（协商缓存）实现，下面详细介绍。</li></ul><h5 id="expires" tabindex="-1"><a class="header-anchor" href="#expires"><span>Expires</span></a></h5><ul><li>http1.0提出的一个表示资源过期时间的header，它描述的是一个绝对时间，由服务器返回，用GMT格式的字符串表示，如：Expires:Thu, 31 Dec 2016 23:55:55 GMT，</li><li>缺点：Expires是较老的强缓存管理header，由于它是服务器返回的一个绝对时间，这样存在一个问题，如果客户端的时间与服务器的时间相差很大（比如时钟不同步，或者跨时区），那么误差就很大，所以在HTTP 1.1版开始，使用Cache-Control: max-age=秒替代。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>读取缓存数据条件：缓存过期时间（服务器的）&lt; 当前时间（客户端的)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="cache-control" tabindex="-1"><a class="header-anchor" href="#cache-control"><span>Cache-Control</span></a></h5><ul><li>描述的是一个相对时间，在进行缓存命中的时候，都是利用客户端时间进行判断，所以相比较Expires，Cache-Control的缓存管理更有效，安全一些。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>读取缓存数据条件：上次缓存时间（客户端的）+max-age &lt; 当前时间（客户端的）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>上次缓存时间就是Last-Modified</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>各个消息中的指令含义如下：</span></span>
<span class="line"><span>Public指示响应可被任何缓存区缓存。</span></span>
<span class="line"><span>Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当前用户的部分响应消息，此响应消息对于其他用户的请求无效。</span></span>
<span class="line"><span>no-cache指示请求或响应消息不能缓存，该选项并不是说可以设置”不缓存“，而是需要和服务器确认</span></span>
<span class="line"><span>no-store在请求消息中发送将使得请求和响应消息都不使用缓存，完全不存下來。</span></span>
<span class="line"><span>max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。上次缓存时间（客户端的）+max-age（64200s）&lt;客户端当前时间</span></span>
<span class="line"><span>min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应。</span></span>
<span class="line"><span>max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意：这两个header可以只启用一个，也可以同时启用，当response header中，Expires和Cache-Control同时存在时，Cache-Control优先级高于Expires：</li></ul><h5 id="last-modified-if-modified-since" tabindex="-1"><a class="header-anchor" href="#last-modified-if-modified-since"><span>Last-Modified/If-Modified-Since</span></a></h5><ul><li>Last-Modified/If-Modified-Since要配合Cache-Control使用。</li><li>【Last-Modified】：标示这个响应资源的最后修改时间。web服务器在响应请求时，告诉浏览器资源的最后修改时间。</li><li>【If-Modified-Since】：当资源过期时（强缓存失效），发现资源具有Last-Modified声明，则再次向web服务器请求时带上头 If-Modified-Since，表示请求时间。</li><li>web服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。</li><li>若最后修改时间较新，说明资源又被改动过，则响应整片资源内容（写在响应消息包体内），HTTP 200；</li><li>若最后修改时间较旧，说明资源无新修改，则响应HTTP 304 (无需包体，节省浏览)，告知浏览器继续使用所保存的cache。</li><li>缺点：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>1.Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间（无法及时更新文件）</span></span>
<span class="line"><span>2.如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存，有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形（无法使用缓存）。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="etag-if-none-match" tabindex="-1"><a class="header-anchor" href="#etag-if-none-match"><span>Etag/If-None-Match</span></a></h5><ul><li>Etag/If-None-Match也要配合Cache-Control使用</li><li>【Etag】web服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。Apache中，ETag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。</li><li>【If-None-Match】当资源过期时（使用Cache-Control标识的max-age），</li><li>发现资源具有Etage声明，则再次向web服务器请求时带上头If-None-Match （Etag的值）。</li><li>web服务器收到请求后发现有头If-None-Match则与被请求资源的相应校验串进行比对，决定返回200或304。</li><li>Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。</li><li>Last-Modified与ETag一起使用时，服务器会优先验证ETag。</li></ul><h5 id="过程" tabindex="-1"><a class="header-anchor" href="#过程"><span>过程</span></a></h5><ul><li>浏览器第一次请求流程图:</li></ul><p><a href="./1.png"></a></p><ul><li>浏览器再次请求时:</li></ul><p><a href="./2.png"></a></p><hr><h1 id="cdn缓存" tabindex="-1"><a class="header-anchor" href="#cdn缓存"><span>CDN缓存</span></a></h1><p>1)、用户向浏览器提供要访问的域名； 2)、浏览器调用域名解析库对域名进行解析，由于CDN对域名解析过程进行了调整，所以解析函数库一般得到的是该域名对应的CNAME记录，为了得到实际IP地址，浏览器需要再次对获得的CNAME域名进行解析以得到实际的IP地址；在此过程中，使用的全局负载均衡DNS解析，如根据地理位置信息解析对应的IP地址，使得用户能就近访问。 3)、此次解析得到CDN缓存服务器的IP地址，浏览器在得到实际的IP地址以后，向缓存服务器发出访问请求； 4)、若请求文件并未修改，返回304（充当服务器的角色）。若当前文件已过期，则缓存服务器根据浏览器提供的要访问的域名，通过Cache内部专用DNS解析得到此域名的实际IP地址，再由缓存服务器向此实际IP地址提交访问请求； 5)、缓存服务器从实际IP地址得得到内容以后，一方面在本地进行保存，以备以后使用，二方面把获取的数据返回给客户端，完成数据服务过程； 6)、客户端得到由缓存服务器返回的数据以后显示出来并完成整个浏览的数据请求过程。</p><hr><h3 id="三级缓存原理" tabindex="-1"><a class="header-anchor" href="#三级缓存原理"><span>三级缓存原理</span></a></h3><ul><li>1、先查找内存，如果内存中存在，从内存中加载；</li><li>2、如果内存中未查找到，选择硬盘获取，如果硬盘中有，从硬盘中加载；</li><li>3、如果硬盘中未查找到，那就进行网络请求；</li><li>4、加载到的资源缓存到硬盘和内存；</li></ul><h3 id="http状态码及区别" tabindex="-1"><a class="header-anchor" href="#http状态码及区别"><span>HTTP状态码及区别</span></a></h3><ul><li>【200 form memory cache】不访问服务器，一般已经加载过该资源且缓存在了内存当中，直接从内存中读取缓存。浏览器关闭后，数据将不存在（资源被释放掉了），再次打开相同的页面时，不会出现from memory cache。不请求网络资源，资源在内存当中，一般脚本、字体、图片会存在内存当中。</li><li>【200 from disk cache】不访问服务器，已经在之前的某个时间加载过该资源，直接从硬盘中读取缓存，关闭浏览器后，数据依然存在，此资源不会随着该页面的关闭而释放掉下次打开仍然会是from disk cache。不请求网络资源，在磁盘当中，一般非脚本会存在内存当中，如css等</li><li>【304 Not Modified】访问服务器，发现数据没有更新，服务器返回此状态码。然后从缓存中读取数据。请求服务端发现资源没更新，使用本地资源</li><li>以上是chrome在请求资源是最常见的两种http状态码。由此可见样式表一般在磁盘中，不会缓存到内存中去，因为css样式加载一次即可渲染出网页，但是脚本却可能随时会执行，如果脚本在磁盘当中，在执行该脚本需要从磁盘中取到内存当中来，这样的IO开销是比较大的，有可能会导致浏览器失去响应。</li></ul><h3 id="几种状态的执行顺序" tabindex="-1"><a class="header-anchor" href="#几种状态的执行顺序"><span>几种状态的执行顺序</span></a></h3><ul><li>现加载一种资源（例如：图片）：</li><li>访问</li><li>-&gt; 200</li><li>-&gt; 退出浏览器 再进来</li><li>-&gt; 200(from disk cache)</li><li>-&gt; 刷新</li><li>-&gt; 200(from memory cache)</li></ul><h3 id="不同浏览器策略" tabindex="-1"><a class="header-anchor" href="#不同浏览器策略"><span>不同浏览器策略</span></a></h3><ul><li>在Firefox下并没有from memory cache以及from disk cache的状态展现，</li><li>相同的资源在chrome下是from disk/memory cache，但是Firefox统统是304状态码。</li><li>即Firefox下会缓存资源，但是每次都会请求服务器对比当前缓存是否更改，chrome不请求服务器，直接拿过来用。这也是为啥chrome比较快的原因之一吧</li></ul><hr><h3 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后：</span></a></h3><p><a href="./3.jpg"></a></p>`,50),t=[n];function h(r,d){return a(),i("div",null,t)}const p=e(s,[["render",h],["__file","缓存.html.vue"]]),m=JSON.parse('{"path":"/frontEndInterview/%E6%A1%86%E6%9E%B6%E6%89%93%E5%8C%85/%E7%BC%93%E5%AD%98.html","title":"缓存","lang":"zh-CN","frontmatter":{"title":"缓存","icon":"circle-info","description":"缓存类 原因 1.请求更快：通过将内容缓存在本地浏览器或距离最近的缓存服务器（如CDN），在不影响网站交互的前提下可以大大加快网站加载速度。 减少体积和数量 2.节省带宽：对于已缓存的文件，可以减少请求带宽甚至无需请求网络。 3.降低服务器压力：在大量用户并发请求的情况下，服务器的性能受到限制，此时将一些静态资源放置在网络的多个节点，可以起到均衡负载的...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/frontEndInterview/%E6%A1%86%E6%9E%B6%E6%89%93%E5%8C%85/%E7%BC%93%E5%AD%98.html"}],["meta",{"property":"og:site_name","content":"前端知识随笔"}],["meta",{"property":"og:title","content":"缓存"}],["meta",{"property":"og:description","content":"缓存类 原因 1.请求更快：通过将内容缓存在本地浏览器或距离最近的缓存服务器（如CDN），在不影响网站交互的前提下可以大大加快网站加载速度。 减少体积和数量 2.节省带宽：对于已缓存的文件，可以减少请求带宽甚至无需请求网络。 3.降低服务器压力：在大量用户并发请求的情况下，服务器的性能受到限制，此时将一些静态资源放置在网络的多个节点，可以起到均衡负载的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-24T03:48:33.000Z"}],["meta",{"property":"article:author","content":"小安"}],["meta",{"property":"article:modified_time","content":"2024-06-24T03:48:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"缓存\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-24T03:48:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小安\\",\\"url\\":\\"https://github.com/an31742\\"}]}"]]},"headers":[{"level":3,"title":"原因","slug":"原因","link":"#原因","children":[]},{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":3,"title":"种类","slug":"种类","link":"#种类","children":[]},{"level":3,"title":"类型：","slug":"类型","link":"#类型","children":[]},{"level":3,"title":"设置：","slug":"设置","link":"#设置","children":[]},{"level":3,"title":"1.Meta标签控制缓存（非HTTP协议定义）","slug":"_1-meta标签控制缓存-非http协议定义","link":"#_1-meta标签控制缓存-非http协议定义","children":[]},{"level":3,"title":"2.HTTP头信息控制缓存","slug":"_2-http头信息控制缓存","link":"#_2-http头信息控制缓存","children":[]},{"level":3,"title":"三级缓存原理","slug":"三级缓存原理","link":"#三级缓存原理","children":[]},{"level":3,"title":"HTTP状态码及区别","slug":"http状态码及区别","link":"#http状态码及区别","children":[]},{"level":3,"title":"几种状态的执行顺序","slug":"几种状态的执行顺序","link":"#几种状态的执行顺序","children":[]},{"level":3,"title":"不同浏览器策略","slug":"不同浏览器策略","link":"#不同浏览器策略","children":[]},{"level":3,"title":"最后：","slug":"最后","link":"#最后","children":[]}],"git":{"createdTime":1719137021000,"updatedTime":1719200913000,"contributors":[{"name":"an31742","email":"2234170284@qq.com","commits":2}]},"readingTime":{"minutes":9.85,"words":2954},"filePathRelative":"frontEndInterview/框架打包/缓存.md","localizedDate":"2024年6月23日","autoDesc":true}');export{p as comp,m as data};
