import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as i,d as l,w as t,a as s,o as r,f as p}from"./app-Co5ZRGLE.js";const d={},c=s(`<hr><p><strong>🧠</strong>** 本质透视镜：这是什么？**</p><p><strong>本质是</strong>：<strong>通过中间件在请求链中读取文件并返回数据</strong>。</p><p>这其实就是用 Express 的 middleware 机制，在接收到 HTTP 请求时读取本地文件（如 JSON、文本、CSV等），处理后响应客户端。</p><hr><h1 id="🔗-关系拓扑图-为什么这样做" tabindex="-1"><a class="header-anchor" href="#🔗-关系拓扑图-为什么这样做"><span><strong>🔗</strong>** 关系拓扑图：为什么这样做？**</span></a></h1><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>HTTP 请求 → → Express 中间件 → → fs 读取文件  </span></span>
<span class="line"><span>文件内容 → → res.send(data) → 客户端收到数据</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当：</p><ul><li>后端数据源是本地文件</li></ul><p>就会触发：</p><ul><li>需要在 API 接口中动态读取并返回</li></ul><hr><h1 id="🎯-行动意义锚点-为了什么" tabindex="-1"><a class="header-anchor" href="#🎯-行动意义锚点-为了什么"><span><strong>🎯</strong>** 行动意义锚点：为了什么？**</span></a></h1><p><strong>核心价值是</strong>：快速模拟后端接口 / 本地数据服务 / 文件预览功能</p><ul><li>✅ 避免上线前依赖真实后端</li><li>✅ 获得前后端独立开发能力</li><li>✅ 为 mock 数据、前端调试、CMS 系统提供接口基础</li></ul><hr><h1 id="🛠-步骤拆解器-怎么做" tabindex="-1"><a class="header-anchor" href="#🛠-步骤拆解器-怎么做"><span><strong>🛠</strong>** 步骤拆解器：怎么做？**</span></a></h1>`,17),o=s(`<hr><h2 id="_1-初始化项目-安装依赖" tabindex="-1"><a class="header-anchor" href="#_1-初始化项目-安装依赖"><span><strong>① 初始化项目 &amp; 安装依赖</strong></span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>mkdir file-api-server &amp;&amp; cd file-api-server</span></span>
<span class="line"><span>npm init -y</span></span>
<span class="line"><span>npm install express</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_2-创建文件-如" tabindex="-1"><a class="header-anchor" href="#_2-创建文件-如"><span><strong>② 创建文件：如</strong>** **</span></a></h2><h2 id="data-users-json" tabindex="-1"><a class="header-anchor" href="#data-users-json"><span><strong>data/users.json</strong></span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[</span></span>
<span class="line"><span>  { &quot;id&quot;: 1, &quot;name&quot;: &quot;Alice&quot; },</span></span>
<span class="line"><span>  { &quot;id&quot;: 2, &quot;name&quot;: &quot;Bob&quot; }</span></span>
<span class="line"><span>]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_3-编写-express-应用-含中间件读取" tabindex="-1"><a class="header-anchor" href="#_3-编写-express-应用-含中间件读取"><span><strong>③ 编写 Express 应用（含中间件读取）</strong></span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// server.js</span></span>
<span class="line"><span>const express = require(&#39;express&#39;);</span></span>
<span class="line"><span>const fs = require(&#39;fs&#39;);</span></span>
<span class="line"><span>const path = require(&#39;path&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const app = express();</span></span>
<span class="line"><span>const PORT = 3000;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// ✅ 中间件：读取文件数据</span></span>
<span class="line"><span>const readFileMiddleware = (filePath) =&gt; (req, res, next) =&gt; {</span></span>
<span class="line"><span>  fs.readFile(path.resolve(__dirname, filePath), &#39;utf-8&#39;, (err, data) =&gt; {</span></span>
<span class="line"><span>    if (err) return next(err);</span></span>
<span class="line"><span>    req.fileData = JSON.parse(data); // 挂载到 req 对象上</span></span>
<span class="line"><span>    next();</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// ✅ 使用中间件</span></span>
<span class="line"><span>app.get(&#39;/api/users&#39;, readFileMiddleware(&#39;./data/users.json&#39;), (req, res) =&gt; {</span></span>
<span class="line"><span>  res.json({</span></span>
<span class="line"><span>    success: true,</span></span>
<span class="line"><span>    data: req.fileData</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 错误处理</span></span>
<span class="line"><span>app.use((err, req, res, next) =&gt; {</span></span>
<span class="line"><span>  res.status(500).json({ success: false, message: err.message });</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>app.listen(PORT, () =&gt; {</span></span>
<span class="line"><span>  console.log(\`🚀 Server is running on http://localhost:\${PORT}\`);</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_4-启动服务并访问" tabindex="-1"><a class="header-anchor" href="#_4-启动服务并访问"><span><strong>④ 启动服务并访问</strong></span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>node server.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>访问接口：<a href="http://localhost:3000/api/users" target="_blank" rel="noopener noreferrer">http://localhost:3000/api/users</a></p><p>响应结果：</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;success&quot;: true,</span></span>
<span class="line"><span>  &quot;data&quot;: [</span></span>
<span class="line"><span>    { &quot;id&quot;: 1, &quot;name&quot;: &quot;Alice&quot; },</span></span>
<span class="line"><span>    { &quot;id&quot;: 2, &quot;name&quot;: &quot;Bob&quot; }</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🧩-可拓展玩法" tabindex="-1"><a class="header-anchor" href="#🧩-可拓展玩法"><span><strong>🧩</strong>** 可拓展玩法**</span></a></h2><table><thead><tr><th><strong>场景</strong></th><th><strong>技术点</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>支持 POST 写入</td><td>fs.writeFile</td><td>提交数据持久化到 JSON 文件</td></tr><tr><td>支持多文件动态路径</td><td>路径参数 + req.params</td><td>/api/:filename</td></tr><tr><td>热更新数据源</td><td>fs.watch / nodemon</td><td>文件变更自动重载</td></tr><tr><td>支持 CSV / Markdown</td><td>csv-parse, gray-matter</td><td>将 CSV 或 MD 转换为 JSON 响应</td></tr><tr><td>模拟 REST 接口</td><td>express.Router()</td><td>多资源类型模拟服务</td></tr></tbody></table><hr><h2 id="📦-项目结构推荐" tabindex="-1"><a class="header-anchor" href="#📦-项目结构推荐"><span><strong>📦</strong>** 项目结构推荐**</span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>file-api-server/</span></span>
<span class="line"><span>├── data/</span></span>
<span class="line"><span>│   └── users.json</span></span>
<span class="line"><span>├── middlewares/</span></span>
<span class="line"><span>│   └── readFile.js</span></span>
<span class="line"><span>├── routes/</span></span>
<span class="line"><span>│   └── api.js</span></span>
<span class="line"><span>├── server.js</span></span>
<span class="line"><span>└── package.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>如需我帮你生成这个项目的 GitHub 模板结构或拓展成 mock 工具、动态接口平台（支持 JSON/CSV/Markdown 自动路由），可以继续说 ✅</p><p>是否需要我现在导出一份这个项目为 zip 包或 Markdown 文档？</p>`,25);function h(u,v){const n=a("font");return r(),i("div",null,[c,l(n,{style:{color:"#0e0e0e"}},{default:t(()=>[p("操作路径：① → ② → ③ → ④")]),_:1}),o])}const g=e(d,[["render",h],["__file","Node.js 使用 Express 中间件实现文件读取 HTTP 接口.html.vue"]]),k=JSON.parse('{"path":"/businessProblem/%E8%BF%9B%E9%98%B6/Node.js%20%E4%BD%BF%E7%94%A8%20Express%20%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%20HTTP%20%E6%8E%A5%E5%8F%A3.html","title":"Node.js 使用 Express 中间件实现文件读取 HTTP 接口","lang":"zh-CN","frontmatter":{"title":"Node.js 使用 Express 中间件实现文件读取 HTTP 接口","icon":"circle-info","description":"🧠** 本质透视镜：这是什么？** 本质是：通过中间件在请求链中读取文件并返回数据。 这其实就是用 Express 的 middleware 机制，在接收到 HTTP 请求时读取本地文件（如 JSON、文本、CSV等），处理后响应客户端。 🔗** 关系拓扑图：为什么这样做？** 当： 后端数据源是本地文件 就会触发： 需要在 API 接口中动态读取...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/businessProblem/%E8%BF%9B%E9%98%B6/Node.js%20%E4%BD%BF%E7%94%A8%20Express%20%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%20HTTP%20%E6%8E%A5%E5%8F%A3.html"}],["meta",{"property":"og:site_name","content":"前端知识随笔"}],["meta",{"property":"og:title","content":"Node.js 使用 Express 中间件实现文件读取 HTTP 接口"}],["meta",{"property":"og:description","content":"🧠** 本质透视镜：这是什么？** 本质是：通过中间件在请求链中读取文件并返回数据。 这其实就是用 Express 的 middleware 机制，在接收到 HTTP 请求时读取本地文件（如 JSON、文本、CSV等），处理后响应客户端。 🔗** 关系拓扑图：为什么这样做？** 当： 后端数据源是本地文件 就会触发： 需要在 API 接口中动态读取..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-28T13:02:59.000Z"}],["meta",{"property":"article:author","content":"小安"}],["meta",{"property":"article:modified_time","content":"2025-07-28T13:02:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Node.js 使用 Express 中间件实现文件读取 HTTP 接口\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-28T13:02:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小安\\",\\"url\\":\\"https://github.com/an31742\\"}]}"]]},"headers":[{"level":2,"title":"① 初始化项目 & 安装依赖","slug":"_1-初始化项目-安装依赖","link":"#_1-初始化项目-安装依赖","children":[]},{"level":2,"title":"② 创建文件：如** **","slug":"_2-创建文件-如","link":"#_2-创建文件-如","children":[]},{"level":2,"title":"data/users.json","slug":"data-users-json","link":"#data-users-json","children":[]},{"level":2,"title":"③ 编写 Express 应用（含中间件读取）","slug":"_3-编写-express-应用-含中间件读取","link":"#_3-编写-express-应用-含中间件读取","children":[]},{"level":2,"title":"④ 启动服务并访问","slug":"_4-启动服务并访问","link":"#_4-启动服务并访问","children":[]},{"level":2,"title":"🧩** 可拓展玩法**","slug":"🧩-可拓展玩法","link":"#🧩-可拓展玩法","children":[]},{"level":2,"title":"📦** 项目结构推荐**","slug":"📦-项目结构推荐","link":"#📦-项目结构推荐","children":[]}],"git":{"createdTime":1753707779000,"updatedTime":1753707779000,"contributors":[{"name":"an31742","email":"2234170284@qq.com","commits":1}]},"readingTime":{"minutes":2.06,"words":619},"filePathRelative":"businessProblem/进阶/Node.js 使用 Express 中间件实现文件读取 HTTP 接口.md","localizedDate":"2025年7月28日","autoDesc":true}');export{g as comp,k as data};
