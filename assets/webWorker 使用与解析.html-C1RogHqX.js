import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,c as o,d as a,w as r,e,f as s,a as t,o as p}from"./app-Co5ZRGLE.js";const d={},c=e("hr",null,null,-1),h=e("p",null,[e("strong",null,"🧠"),s("** "),e("strong",null,[e("strong",null,"1️⃣")]),s(" 本质透视镜：**")],-1),u=e("p",null,[e("strong",null,"本质是"),s("「浏览器中的线程分流机制」")],-1),g=t('<hr><h2 id="🔗-2️⃣-关系拓扑图" tabindex="-1"><a class="header-anchor" href="#🔗-2️⃣-关系拓扑图"><span><strong>🔗</strong>** <strong><strong>2️⃣</strong></strong> 关系拓扑图：**</span></a></h2><p>当浏览器执行耗时任务时 → 会阻塞主线程 ⊣ 页面交互与渲染</p><p>当使用 Web Worker 分流计算时 → 后台线程处理 → 主线程只负责 UI 更新 → 提升用户体验 ✅</p><p>关键要素：</p><ul><li>主线程（UI Thread）</li><li>Web Worker（后台线程）</li><li>postMessage ⬄ 消息通信机制</li></ul><hr><h2 id="🎯-3️⃣-行动意义锚点" tabindex="-1"><a class="header-anchor" href="#🎯-3️⃣-行动意义锚点"><span><strong>🎯</strong>** <strong><strong>3️⃣</strong></strong> 行动意义锚点：**</span></a></h2><p><strong>核心价值是</strong>「避免 UI 卡顿，提升性能与响应性」</p>',9),b=t(`<hr><h2 id="🔨-4️⃣-步骤拆解器-web-worker-使用方法详解" tabindex="-1"><a class="header-anchor" href="#🔨-4️⃣-步骤拆解器-web-worker-使用方法详解"><span><strong>🔨</strong>** <strong><strong>4️⃣</strong></strong> 步骤拆解器：Web Worker 使用方法详解**</span></a></h2><h3 id="✅-使用步骤" tabindex="-1"><a class="header-anchor" href="#✅-使用步骤"><span><strong>✅</strong>** 使用步骤：**</span></a></h3><p><strong>操作路径：① → ② → ③ → ④</strong></p><hr><h3 id="✨-示例-计算斐波那契数列-重计算场景" tabindex="-1"><a class="header-anchor" href="#✨-示例-计算斐波那契数列-重计算场景"><span><strong>✨</strong>** 示例：计算斐波那契数列（重计算场景）**</span></a></h3><h4 id="🔧-1-创建-worker-脚本-worker-js" tabindex="-1"><a class="header-anchor" href="#🔧-1-创建-worker-脚本-worker-js"><span><strong>🔧</strong>** ① 创建 Worker 脚本（worker.js）**</span></a></h4><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// worker.js</span></span>
<span class="line"><span>self.onmessage = function (e) {</span></span>
<span class="line"><span>  const num = e.data;</span></span>
<span class="line"><span>  const result = fibonacci(num);</span></span>
<span class="line"><span>  self.postMessage(result);</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function fibonacci(n) {</span></span>
<span class="line"><span>  if (n &lt;= 1) return n;</span></span>
<span class="line"><span>  return fibonacci(n - 1) + fibonacci(n - 2);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="🧩-2-在主线程中使用-worker" tabindex="-1"><a class="header-anchor" href="#🧩-2-在主线程中使用-worker"><span><strong>🧩</strong>** ② 在主线程中使用 Worker**</span></a></h4><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// main.js 或 HTML 中 script</span></span>
<span class="line"><span>const worker = new Worker(&#39;worker.js&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>worker.postMessage(40); // 向 Worker 发送数据</span></span>
<span class="line"><span></span></span>
<span class="line"><span>worker.onmessage = function (e) {</span></span>
<span class="line"><span>  console.log(&#39;计算结果：&#39;, e.data); // 接收 Worker 返回的数据</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="❗-避坑提示" tabindex="-1"><a class="header-anchor" href="#❗-避坑提示"><span>**❗**<strong>避坑提示：</strong></span></a></h4><ul><li>❗<strong>Worker 不能访问 DOM</strong>，也不能直接访问主线程变量</li><li>❗<strong>路径需相对独立</strong>，建议使用 Blob URL 或 Webpack loader（如 worker-loader）</li><li>❗<strong>通信为异步过程</strong>，不能阻塞等待返回结果</li></ul><hr><h2 id="💡-衍生应用场景推荐" tabindex="-1"><a class="header-anchor" href="#💡-衍生应用场景推荐"><span><strong>💡</strong>** 衍生应用场景推荐：**</span></a></h2><table><thead><tr><th><strong>应用场景</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>ECharts 渲染前数据处理</td><td>提前计算、聚合等操作</td></tr><tr><td>图像处理</td><td>base64转码、滤镜计算等</td></tr><tr><td>文件解析</td><td>CSV/Excel 分析</td></tr><tr><td>AI推理 / TensorFlow.js</td><td>复杂模型推理时并行处理</td></tr><tr><td>WebSocket 消息解包</td><td>高频数据拆包处理</td></tr></tbody></table><hr><h2 id="📦-如果用-vue-或-react-可以怎么封装" tabindex="-1"><a class="header-anchor" href="#📦-如果用-vue-或-react-可以怎么封装"><span><strong>📦</strong>** 如果用 Vue 或 React，可以怎么封装？**</span></a></h2><h3 id="vue-示例-composition-api" tabindex="-1"><a class="header-anchor" href="#vue-示例-composition-api"><span><strong>Vue 示例（Composition API）：</strong></span></a></h3><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// useWorker.ts</span></span>
<span class="line"><span>export function useWorker(workerUrl: string) {</span></span>
<span class="line"><span>  const worker = new Worker(workerUrl);</span></span>
<span class="line"><span>  const send = (data: any) =&gt; worker.postMessage(data);</span></span>
<span class="line"><span>  const onMessage = (cb: (data: any) =&gt; void) =&gt; {</span></span>
<span class="line"><span>    worker.onmessage = (e) =&gt; cb(e.data);</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span>  return { send, onMessage, terminate: () =&gt; worker.terminate() };</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🧠-总结一句话" tabindex="-1"><a class="header-anchor" href="#🧠-总结一句话"><span><strong>🧠</strong>** 总结一句话：**</span></a></h2>`,23),m=e("hr",null,null,-1),k=e("p",null,"如果你需要封装为类库、配合 Webpack/Vite 配置打包、或与 Vue3、React 搭配使用的完整案例，我也可以为你写出完整代码结构和演示页面。需要吗？",-1);function v(f,_){const n=l("font");return p(),o("div",null,[c,h,u,a(n,{style:{color:"#0e0e0e"}},{default:r(()=>[s("这其实就是让耗时任务不阻塞主线程，提高页面流畅度。")]),_:1}),g,a(n,{style:{color:"#0e0e0e"}},{default:r(()=>[s("❌")]),_:1}),a(n,{style:{color:"#0e0e0e"}},{default:r(()=>[s(" 如果不使用：数据量稍大就会造成白屏/假死")]),_:1}),a(n,{style:{color:"#0e0e0e"}},{default:r(()=>[s("✅")]),_:1}),a(n,{style:{color:"#0e0e0e"}},{default:r(()=>[s(" 如果使用：可将大计算、解析、渲染前数据准备放入 Worker，为团队避免性能瓶颈，尤其适用于图表渲染、大量 JSON 解析、图像处理等场景。")]),_:1}),b,e("p",null,[e("strong",null,[a(n,{style:{color:"#0e0e0e"}},{default:r(()=>[s("Web Worker 本质是将重任务从主线程“搬家”")]),_:1})]),a(n,{style:{color:"#0e0e0e"}},{default:r(()=>[s("，是前端性能优化的关键利器之一，建议每个高级前端都深入掌握其用法与适用边界。")]),_:1})]),m,k])}const y=i(d,[["render",v],["__file","webWorker 使用与解析.html.vue"]]),x=JSON.parse('{"path":"/businessProblem/%E8%BF%9B%E9%98%B6/webWorker%20%E4%BD%BF%E7%94%A8%E4%B8%8E%E8%A7%A3%E6%9E%90.html","title":"webWorker 使用与解析","lang":"zh-CN","frontmatter":{"title":"webWorker 使用与解析","icon":"circle-info","description":"🧠** 1️⃣ 本质透视镜：** 本质是「浏览器中的线程分流机制」 🔗** 2️⃣ 关系拓扑图：** 当浏览器执行耗时任务时 → 会阻塞主线程 ⊣ 页面交互与渲染 当使用 Web Worker 分流计算时 → 后台线程处理 → 主线程只负责 UI 更新 → 提升用户体验 ✅ 关键要素： 主线程（UI Thread） Web Worker（后台线程）...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/businessProblem/%E8%BF%9B%E9%98%B6/webWorker%20%E4%BD%BF%E7%94%A8%E4%B8%8E%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"前端知识随笔"}],["meta",{"property":"og:title","content":"webWorker 使用与解析"}],["meta",{"property":"og:description","content":"🧠** 1️⃣ 本质透视镜：** 本质是「浏览器中的线程分流机制」 🔗** 2️⃣ 关系拓扑图：** 当浏览器执行耗时任务时 → 会阻塞主线程 ⊣ 页面交互与渲染 当使用 Web Worker 分流计算时 → 后台线程处理 → 主线程只负责 UI 更新 → 提升用户体验 ✅ 关键要素： 主线程（UI Thread） Web Worker（后台线程）..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-28T13:02:59.000Z"}],["meta",{"property":"article:author","content":"小安"}],["meta",{"property":"article:modified_time","content":"2025-07-28T13:02:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"webWorker 使用与解析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-28T13:02:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小安\\",\\"url\\":\\"https://github.com/an31742\\"}]}"]]},"headers":[{"level":2,"title":"🔗** 2️⃣ 关系拓扑图：**","slug":"🔗-2️⃣-关系拓扑图","link":"#🔗-2️⃣-关系拓扑图","children":[]},{"level":2,"title":"🎯** 3️⃣ 行动意义锚点：**","slug":"🎯-3️⃣-行动意义锚点","link":"#🎯-3️⃣-行动意义锚点","children":[]},{"level":2,"title":"🔨** 4️⃣ 步骤拆解器：Web Worker 使用方法详解**","slug":"🔨-4️⃣-步骤拆解器-web-worker-使用方法详解","link":"#🔨-4️⃣-步骤拆解器-web-worker-使用方法详解","children":[{"level":3,"title":"✅** 使用步骤：**","slug":"✅-使用步骤","link":"#✅-使用步骤","children":[]},{"level":3,"title":"✨** 示例：计算斐波那契数列（重计算场景）**","slug":"✨-示例-计算斐波那契数列-重计算场景","link":"#✨-示例-计算斐波那契数列-重计算场景","children":[]}]},{"level":2,"title":"💡** 衍生应用场景推荐：**","slug":"💡-衍生应用场景推荐","link":"#💡-衍生应用场景推荐","children":[]},{"level":2,"title":"📦** 如果用 Vue 或 React，可以怎么封装？**","slug":"📦-如果用-vue-或-react-可以怎么封装","link":"#📦-如果用-vue-或-react-可以怎么封装","children":[{"level":3,"title":"Vue 示例（Composition API）：","slug":"vue-示例-composition-api","link":"#vue-示例-composition-api","children":[]}]},{"level":2,"title":"🧠** 总结一句话：**","slug":"🧠-总结一句话","link":"#🧠-总结一句话","children":[]}],"git":{"createdTime":1753707779000,"updatedTime":1753707779000,"contributors":[{"name":"an31742","email":"2234170284@qq.com","commits":1}]},"readingTime":{"minutes":2.27,"words":681},"filePathRelative":"businessProblem/进阶/webWorker 使用与解析.md","localizedDate":"2025年7月28日","autoDesc":true}');export{y as comp,x as data};
