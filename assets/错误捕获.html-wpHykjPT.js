import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as n,a}from"./app-z9-e5jPU.js";const i={},l=a(`<h1 id="错误监控类" tabindex="-1"><a class="header-anchor" href="#错误监控类"><span>错误监控类</span></a></h1><h3 id="前端错误的分类" tabindex="-1"><a class="header-anchor" href="#前端错误的分类"><span>前端错误的分类</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>及时运行错误：代码错误</span></span>
<span class="line"><span>资源加载错误</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="错误的捕获方式" tabindex="-1"><a class="header-anchor" href="#错误的捕获方式"><span>错误的捕获方式</span></a></h3><ul><li>及时运行错误，代码错误</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>1. try...catch:</span></span>
<span class="line"><span>2. window.onerror冒泡的错误捕获</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>资源加载错误：不会冒泡。所以window.onerror响应不到。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>1.object.onerror:img标签，script标签也可以加这个事件。</span></span>
<span class="line"><span>$(&quot;img&quot;).error(function(e){</span></span>
<span class="line"><span>    console.log(e);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2.performance.getEntries() 返回所有加载资源的信息的数组。</span></span>
<span class="line"><span>performance.getEntries().forEach( function(ele, index) {</span></span>
<span class="line"><span>  console.log(ele);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3.Error事件捕获：捕获阶段可以拿到错误。必须是最先放在head里注册，进行事件监听。</span></span>
<span class="line"><span>window.addEventListener(&quot;error&quot;,function(e){},true);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="跨域的js如何捕获" tabindex="-1"><a class="header-anchor" href="#跨域的js如何捕获"><span>跨域的JS如何捕获</span></a></h3><ul><li>跨域的JS可以被捕获到么？错误提示是什么？怎么处理？</li><li>但是对于跨域调用的js脚本，onerror事件只会给出很少的报错信息：error: Script error.这个简单的信息很明显不足以看出脚本的具体错误，所以我们可以使用crossorigin属性，使得加载的跨域脚本可以得出跟同域脚本同样的报错信息：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>1.在客户端设置：在script标签上增加crossorigin属性。</span></span>
<span class="line"><span>2.在服务端设置：Access-Control-Allow-Origin:*</span></span>
<span class="line"><span>nodejs express配置：</span></span>
<span class="line"><span>app.all(&#39;/test&#39;, function(req, res, next) {</span></span>
<span class="line"><span>    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span></span>
<span class="line"><span>    res.header(&#39;Access-Control-Allow-Methods&#39;, &#39;PUT, GET, POST, DELETE, OPTIONS&#39;);</span></span>
<span class="line"><span>    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Requested-With&quot;);</span></span>
<span class="line"><span>    res.header(&#39;Access-Control-Allow-Headers&#39;, &#39;Content-Type&#39;);</span></span>
<span class="line"><span>    next();</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>nginx配置：</span></span>
<span class="line"><span>location ^~ /test {</span></span>
<span class="line"><span>    add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;</span></span>
<span class="line"><span>    add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;</span></span>
<span class="line"><span>    add_header &#39;Access-Control-Allow-Methods&#39; &#39;OPTION, POST, GET&#39;;</span></span>
<span class="line"><span>    add_header &#39;Access-Control-Allow-Headers&#39; &#39;X-Requested-With, Content-Type&#39;;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="错误上报的基本原理" tabindex="-1"><a class="header-anchor" href="#错误上报的基本原理"><span>错误上报的基本原理</span></a></h3><ul><li>1.采用ajax通信方式上报</li><li>2.利用Image对象上报:其实把所有的连接，新建new Image(),src访问，错误捕获。优点：不需要借助任何第三方插件，</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>var img = new Image();</span></span>
<span class="line"><span>img.src = &#39;http://www.baidu.com/test.js&#39;;</span></span>
<span class="line"><span>img.onerror = function(e) {</span></span>
<span class="line"><span>  console.log(e);</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),r=[l];function t(p,d){return n(),e("div",null,r)}const h=s(i,[["render",t],["__file","错误捕获.html.vue"]]),u=JSON.parse('{"path":"/frontEndInterview/JavaScript/%E9%94%99%E8%AF%AF%E6%8D%95%E8%8E%B7.html","title":"错误捕获","lang":"zh-CN","frontmatter":{"title":"错误捕获","icon":"circle-info","description":"错误监控类 前端错误的分类 错误的捕获方式 及时运行错误，代码错误 资源加载错误：不会冒泡。所以window.onerror响应不到。 跨域的JS如何捕获 跨域的JS可以被捕获到么？错误提示是什么？怎么处理？ 但是对于跨域调用的js脚本，onerror事件只会给出很少的报错信息：error: Script error.这个简单的信息很明显不足以看出脚本...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/frontEndInterview/JavaScript/%E9%94%99%E8%AF%AF%E6%8D%95%E8%8E%B7.html"}],["meta",{"property":"og:site_name","content":"前端知识随笔"}],["meta",{"property":"og:title","content":"错误捕获"}],["meta",{"property":"og:description","content":"错误监控类 前端错误的分类 错误的捕获方式 及时运行错误，代码错误 资源加载错误：不会冒泡。所以window.onerror响应不到。 跨域的JS如何捕获 跨域的JS可以被捕获到么？错误提示是什么？怎么处理？ 但是对于跨域调用的js脚本，onerror事件只会给出很少的报错信息：error: Script error.这个简单的信息很明显不足以看出脚本..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T10:03:41.000Z"}],["meta",{"property":"article:author","content":"小安"}],["meta",{"property":"article:modified_time","content":"2024-06-23T10:03:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"错误捕获\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-23T10:03:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小安\\",\\"url\\":\\"https://github.com/an31742\\"}]}"]]},"headers":[{"level":3,"title":"前端错误的分类","slug":"前端错误的分类","link":"#前端错误的分类","children":[]},{"level":3,"title":"错误的捕获方式","slug":"错误的捕获方式","link":"#错误的捕获方式","children":[]},{"level":3,"title":"跨域的JS如何捕获","slug":"跨域的js如何捕获","link":"#跨域的js如何捕获","children":[]},{"level":3,"title":"错误上报的基本原理","slug":"错误上报的基本原理","link":"#错误上报的基本原理","children":[]}],"git":{"createdTime":1719137021000,"updatedTime":1719137021000,"contributors":[{"name":"an31742","email":"2234170284@qq.com","commits":1}]},"readingTime":{"minutes":1.51,"words":453},"filePathRelative":"frontEndInterview/JavaScript/错误捕获.md","localizedDate":"2024年6月23日","autoDesc":true}');export{h as comp,u as data};
