import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,c as d,d as n,w as a,f as s,a as t,e as i,o as p}from"./app-alAcU9M9.js";const o={},c=t(`<hr><h2 id="_1️⃣-本质透视镜" tabindex="-1"><a class="header-anchor" href="#_1️⃣-本质透视镜"><span><strong>1️⃣</strong>** 本质透视镜：**</span></a></h2><h2 id="错误处理本质是控制异常传播路径" tabindex="-1"><a class="header-anchor" href="#错误处理本质是控制异常传播路径"><span><strong>错误处理本质是控制异常传播路径</strong></span></a></h2><ul><li>🧠 **这其实就是：**控制异常在“用户层→逻辑层→系统层”之间的传播和反馈路径</li><li>✅ <strong>目标是：</strong><ul><li>拦截关键错误，防止系统崩溃</li><li>输出友好信息，避免用户困惑</li><li>回传可追踪日志，辅助开发排查</li></ul></li></ul><hr><h2 id="_2️⃣-关系拓扑图-错误-→-影响系统各层-→-应用容灾与多维输出机制" tabindex="-1"><a class="header-anchor" href="#_2️⃣-关系拓扑图-错误-→-影响系统各层-→-应用容灾与多维输出机制"><span><strong>2️⃣</strong>** 关系拓扑图：错误 → 影响系统各层 → 应用容灾与多维输出机制**</span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[错误发生点] → 触发 → [前端交互异常 ⊣ 用户信任]</span></span>
<span class="line"><span>                   → [后端崩溃风险 ⊣ 服务可用性]</span></span>
<span class="line"><span>                   → [日志/监控系统 → 运维定位 → 快速修复]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>阈值：</span></span>
<span class="line"><span>- 网络中断 &gt;3s → 重试机制激活</span></span>
<span class="line"><span>- 接口返回500 → 上报到监控系统</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_3️⃣-行动意义锚点" tabindex="-1"><a class="header-anchor" href="#_3️⃣-行动意义锚点"><span><strong>3️⃣</strong>** 行动意义锚点：**</span></a></h2><h2 id="核心价值是构建可恢复的系统信任" tabindex="-1"><a class="header-anchor" href="#核心价值是构建可恢复的系统信任"><span><strong>核心价值是构建可恢复的系统信任</strong></span></a></h2><ul><li>❌ <strong>如果不做？</strong><ul><li>用户看到“白屏”、操作无响应</li><li>数据错误不可追踪，复现困难</li><li>崩溃导致用户流失，业务停滞</li></ul></li><li>✅ <strong>正确做法带来：</strong><ul><li>🛡️ 保证系统可用性</li><li>🔍 快速定位并解决问题</li><li>📈 提升团队稳定性与专业度</li></ul></li></ul><hr><h2 id="_4️⃣-步骤拆解器-全栈错误处理五层机制" tabindex="-1"><a class="header-anchor" href="#_4️⃣-步骤拆解器-全栈错误处理五层机制"><span><strong>4️⃣</strong>** 步骤拆解器：全栈错误处理五层机制**</span></a></h2><h3 id="✅-1-前端层-ui异常处理" tabindex="-1"><a class="header-anchor" href="#✅-1-前端层-ui异常处理"><span><strong>✅</strong>** ① 前端层：UI异常处理**</span></a></h3><h4 id="📌-使用-errorboundary-捕获-react-子组件错误" tabindex="-1"><a class="header-anchor" href="#📌-使用-errorboundary-捕获-react-子组件错误"><span><strong>📌</strong>** 使用 ErrorBoundary 捕获 React 子组件错误**</span></a></h4><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class ErrorBoundary extends React.Component {</span></span>
<span class="line"><span>  state = { hasError: false };</span></span>
<span class="line"><span>  componentDidCatch(error, info) {</span></span>
<span class="line"><span>    logErrorToService(error, info); // 上报</span></span>
<span class="line"><span>    this.setState({ hasError: true });</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  render() {</span></span>
<span class="line"><span>    return this.state.hasError ? &lt;FallbackUI /&gt; : this.props.children;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vue-3-中使用" tabindex="-1"><a class="header-anchor" href="#vue-3-中使用"><span><strong>Vue 3 中使用</strong>** **</span></a></h4><h4 id="errorcaptured" tabindex="-1"><a class="header-anchor" href="#errorcaptured"><span><strong>errorCaptured</strong></span></a></h4><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>setup() {</span></span>
<span class="line"><span>  onErrorCaptured((err, vm, info) =&gt; {</span></span>
<span class="line"><span>    sendToLogService(err, info)</span></span>
<span class="line"><span>    return false // 继续传播 or true 阻止冒泡</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="✅-2-接口层-http请求错误统一处理" tabindex="-1"><a class="header-anchor" href="#✅-2-接口层-http请求错误统一处理"><span><strong>✅</strong>** ② 接口层：HTTP请求错误统一处理**</span></a></h3><h4 id="使用-axios-拦截器封装请求响应处理" tabindex="-1"><a class="header-anchor" href="#使用-axios-拦截器封装请求响应处理"><span><strong>使用 Axios 拦截器封装请求响应处理</strong></span></a></h4><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>axios.interceptors.response.use(</span></span>
<span class="line"><span>  res =&gt; res,</span></span>
<span class="line"><span>  error =&gt; {</span></span>
<span class="line"><span>    const code = error.response?.status</span></span>
<span class="line"><span>    if (code === 401) redirectToLogin()</span></span>
<span class="line"><span>    else if (code === 500) showMessage(&quot;服务器错误&quot;)</span></span>
<span class="line"><span>    reportError(error)</span></span>
<span class="line"><span>    return Promise.reject(error)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),h=t(`<hr><h3 id="✅-3-服务端层-异常栈追踪-错误封装返回" tabindex="-1"><a class="header-anchor" href="#✅-3-服务端层-异常栈追踪-错误封装返回"><span><strong>✅</strong>** ③ 服务端层：异常栈追踪 + 错误封装返回**</span></a></h3><h4 id="node-js-express-错误中间件设计" tabindex="-1"><a class="header-anchor" href="#node-js-express-错误中间件设计"><span><strong>Node.js (Express) 错误中间件设计：</strong></span></a></h4><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>app.use((err, req, res, next) =&gt; {</span></span>
<span class="line"><span>  console.error(err.stack)</span></span>
<span class="line"><span>  const errorId = saveToLog(err) // 生成唯一ID</span></span>
<span class="line"><span>  res.status(500).json({</span></span>
<span class="line"><span>    code: 500,</span></span>
<span class="line"><span>    message: &quot;服务器异常&quot;,</span></span>
<span class="line"><span>    errorId // 前端可显示编号辅助用户报错</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),g=t(`<hr><h3 id="✅-4-多输出机制-日志、监控、告警系统联动" tabindex="-1"><a class="header-anchor" href="#✅-4-多输出机制-日志、监控、告警系统联动"><span><strong>✅</strong>** ④ 多输出机制：日志、监控、告警系统联动**</span></a></h3><h4 id="📤-日志系统-如-winston-elasticsearch" tabindex="-1"><a class="header-anchor" href="#📤-日志系统-如-winston-elasticsearch"><span><strong>📤</strong>** 日志系统（如 Winston + Elasticsearch）**</span></a></h4><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const logger = winston.createLogger({</span></span>
<span class="line"><span>  transports: [new winston.transports.File({ filename: &#39;errors.log&#39; })]</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="📈-接入监控服务-sentry-logrocket-自研系统" tabindex="-1"><a class="header-anchor" href="#📈-接入监控服务-sentry-logrocket-自研系统"><span><strong>📈</strong>** 接入监控服务（Sentry / LogRocket / 自研系统）**</span></a></h4><ul><li>捕获运行时错误、API失败、资源加载失败等</li><li>上报维度：URL、用户ID、操作路径、device</li></ul><hr><h3 id="✅-5-用户反馈机制设计-避免白屏" tabindex="-1"><a class="header-anchor" href="#✅-5-用户反馈机制设计-避免白屏"><span><strong>✅</strong>** ⑤ 用户反馈机制设计（避免白屏）**</span></a></h3><h4 id="常用-ui-响应设计模式" tabindex="-1"><a class="header-anchor" href="#常用-ui-响应设计模式"><span><strong>常用 UI 响应设计模式：</strong></span></a></h4><table><thead><tr><th><strong>错误类型</strong></th><th><strong>UI 响应</strong></th></tr></thead><tbody><tr><td>网络错误</td><td>Toast：“网络连接失败，点击重试”</td></tr><tr><td>权限问题</td><td>跳转登录页，携带来源路径回跳</td></tr><tr><td>接口报错</td><td>弹出Modal + 日志编号 + 联系客服</td></tr><tr><td>全局崩溃</td><td>fallback 页面 + 日志ID + 重载按钮</td></tr></tbody></table><hr><h2 id="🔁-错误处理全流程图" tabindex="-1"><a class="header-anchor" href="#🔁-错误处理全流程图"><span><strong>🔁</strong>** 错误处理全流程图**</span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>浏览器 -&gt; Axios 请求 -&gt; API 异常 -&gt; try/catch -&gt; 统一封装错误 -&gt; 返回错误码 + 日志编号</span></span>
<span class="line"><span>      ↓                                         ↑</span></span>
<span class="line"><span>  ErrorBoundary                             日志记录 &amp; 监控系统上报</span></span>
<span class="line"><span>      ↓                                         ↑</span></span>
<span class="line"><span> 用户展示 fallback UI               运维 / 技术收到通知 / 追查日志</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🔍-错误分类与应对表-全栈开发必备" tabindex="-1"><a class="header-anchor" href="#🔍-错误分类与应对表-全栈开发必备"><span><strong>🔍</strong>** 错误分类与应对表（全栈开发必备）**</span></a></h2><table><thead><tr><th><strong>类型</strong></th><th><strong>来源</strong></th><th><strong>示例</strong></th><th><strong>处理建议</strong></th></tr></thead><tbody><tr><td>语法错误</td><td>前端</td><td>undefined is not a function</td><td>ErrorBoundary/UI fallback</td></tr><tr><td>网络错误</td><td>前端</td><td>请求超时/断网</td><td>重试/缓存/Fallback</td></tr><tr><td>业务异常</td><td>后端</td><td>余额不足、订单状态错误</td><td>toast提示+无日志</td></tr><tr><td>服务器异常</td><td>后端</td><td>500 Internal Error</td><td>返回 errorId，日志记录</td></tr><tr><td>未知错误</td><td>任意</td><td>第三方接口失效</td><td>通用fallback + 上报监控</td></tr><tr><td>用户错误</td><td>用户输入</td><td>表单校验失败</td><td>输入提示，不记录日志</td></tr></tbody></table><hr><h2 id="🛠-实战加分项" tabindex="-1"><a class="header-anchor" href="#🛠-实战加分项"><span><strong>🛠</strong>** 实战加分项**</span></a></h2>`,18),u=i("ul",null,[i("li",null,"✅ 在 SSR 场景中统一处理 getServerSideProps 错误输出"),i("li",{"code,":"","message,":"","data,":"",errorId:""},"✅ API 层返回结构统一格式"),i("li",null,"✅ CLI工具或中间件封装错误类 AppError extends Error"),i("li",null,"✅ Sentry 等监控加上环境标识、用户上下文")],-1),b=t('<hr><h2 id="✨-总结-构建稳定性第一的全栈错误处理系统" tabindex="-1"><a class="header-anchor" href="#✨-总结-构建稳定性第一的全栈错误处理系统"><span><strong>✨</strong>** 总结：构建稳定性第一的全栈错误处理系统**</span></a></h2><table><thead><tr><th><strong>模块</strong></th><th><strong>做法</strong></th><th><strong>价值</strong></th></tr></thead><tbody><tr><td>前端组件层</td><td>ErrorBoundary/UI fallback</td><td>保证可用性，避免白屏</td></tr><tr><td>请求层</td><td>Axios 拦截统一处理</td><td>提升用户体验，结构化反馈</td></tr><tr><td>后端服务层</td><td>try/catch + 日志 + 结构化返回</td><td>快速定位，避免接口崩溃</td></tr><tr><td>多输出</td><td>监控/日志/告警联动</td><td>构建稳定性闭环</td></tr></tbody></table><hr><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2>',5);function v(m,k){const e=l("font");return p(),d("div",null,[n(e,{style:{color:"#0e0e0e"}},{default:a(()=>[s("错误不是 Bug，它是系统设计的一部分。")]),_:1}),n(e,{style:{color:"#0e0e0e"}},{default:a(()=>[s("作为高级前端工程师，必须能构建一整套从前端到后端的 ")]),_:1}),s("**"),n(e,{style:{color:"#0e0e0e"}},{default:a(()=>[s("稳定性保障机制")]),_:1}),s("**"),n(e,{style:{color:"#0e0e0e"}},{default:a(()=>[s("。")]),_:1}),c,n(e,{style:{color:"#0e0e0e"}},{default:a(()=>[s("❗")]),_:1}),n(e,{style:{color:"#0e0e0e"}},{default:a(()=>[s("注意：Axios 的 4xx 不一定是“真正错误”，需要结合业务语义解析")]),_:1}),h,n(e,{style:{color:"#0e0e0e"}},{default:a(()=>[s("❶ 不暴露堆栈信息")]),_:1}),n(e,{style:{color:"#0e0e0e"}},{default:a(()=>[s("❷ 错误唯一编号方便查日志")]),_:1}),n(e,{style:{color:"#0e0e0e"}},{default:a(()=>[s("❸ 兼容国际化 message 提示")]),_:1}),g,u,b])}const E=r(o,[["render",v],["__file","🚨 全栈错误处理实战指南：从前端到后端的多维应对策略.html.vue"]]),y=JSON.parse('{"path":"/businessProblem/%E8%BF%9B%E9%98%B6/%F0%9F%9A%A8%20%E5%85%A8%E6%A0%88%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%EF%BC%9A%E4%BB%8E%E5%89%8D%E7%AB%AF%E5%88%B0%E5%90%8E%E7%AB%AF%E7%9A%84%E5%A4%9A%E7%BB%B4%E5%BA%94%E5%AF%B9%E7%AD%96%E7%95%A5.html","title":"全栈错误处理实战指南：从前端到后端的多维应对策略","lang":"zh-CN","frontmatter":{"title":"全栈错误处理实战指南：从前端到后端的多维应对策略","icon":"circle-info","description":"**** 1️⃣** 本质透视镜：** 错误处理本质是控制异常传播路径 🧠 **这其实就是：**控制异常在“用户层→逻辑层→系统层”之间的传播和反馈路径 ✅ 目标是： 拦截关键错误，防止系统崩溃 输出友好信息，避免用户困惑 回传可追踪日志，辅助开发排查 2️⃣** 关系拓扑图：错误 → 影响系统各层 → 应用容灾与多维输出机制** 3️⃣** 行动意...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/businessProblem/%E8%BF%9B%E9%98%B6/%F0%9F%9A%A8%20%E5%85%A8%E6%A0%88%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%EF%BC%9A%E4%BB%8E%E5%89%8D%E7%AB%AF%E5%88%B0%E5%90%8E%E7%AB%AF%E7%9A%84%E5%A4%9A%E7%BB%B4%E5%BA%94%E5%AF%B9%E7%AD%96%E7%95%A5.html"}],["meta",{"property":"og:site_name","content":"前端知识随笔"}],["meta",{"property":"og:title","content":"全栈错误处理实战指南：从前端到后端的多维应对策略"}],["meta",{"property":"og:description","content":"**** 1️⃣** 本质透视镜：** 错误处理本质是控制异常传播路径 🧠 **这其实就是：**控制异常在“用户层→逻辑层→系统层”之间的传播和反馈路径 ✅ 目标是： 拦截关键错误，防止系统崩溃 输出友好信息，避免用户困惑 回传可追踪日志，辅助开发排查 2️⃣** 关系拓扑图：错误 → 影响系统各层 → 应用容灾与多维输出机制** 3️⃣** 行动意..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-28T13:02:59.000Z"}],["meta",{"property":"article:author","content":"小安"}],["meta",{"property":"article:modified_time","content":"2025-07-28T13:02:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"全栈错误处理实战指南：从前端到后端的多维应对策略\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-28T13:02:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小安\\",\\"url\\":\\"https://github.com/an31742\\"}]}"]]},"headers":[{"level":2,"title":"1️⃣** 本质透视镜：**","slug":"_1️⃣-本质透视镜","link":"#_1️⃣-本质透视镜","children":[]},{"level":2,"title":"错误处理本质是控制异常传播路径","slug":"错误处理本质是控制异常传播路径","link":"#错误处理本质是控制异常传播路径","children":[]},{"level":2,"title":"2️⃣** 关系拓扑图：错误 → 影响系统各层 → 应用容灾与多维输出机制**","slug":"_2️⃣-关系拓扑图-错误-→-影响系统各层-→-应用容灾与多维输出机制","link":"#_2️⃣-关系拓扑图-错误-→-影响系统各层-→-应用容灾与多维输出机制","children":[]},{"level":2,"title":"3️⃣** 行动意义锚点：**","slug":"_3️⃣-行动意义锚点","link":"#_3️⃣-行动意义锚点","children":[]},{"level":2,"title":"核心价值是构建可恢复的系统信任","slug":"核心价值是构建可恢复的系统信任","link":"#核心价值是构建可恢复的系统信任","children":[]},{"level":2,"title":"4️⃣** 步骤拆解器：全栈错误处理五层机制**","slug":"_4️⃣-步骤拆解器-全栈错误处理五层机制","link":"#_4️⃣-步骤拆解器-全栈错误处理五层机制","children":[{"level":3,"title":"✅** ① 前端层：UI异常处理**","slug":"✅-1-前端层-ui异常处理","link":"#✅-1-前端层-ui异常处理","children":[]},{"level":3,"title":"✅** ② 接口层：HTTP请求错误统一处理**","slug":"✅-2-接口层-http请求错误统一处理","link":"#✅-2-接口层-http请求错误统一处理","children":[]},{"level":3,"title":"✅** ③ 服务端层：异常栈追踪 + 错误封装返回**","slug":"✅-3-服务端层-异常栈追踪-错误封装返回","link":"#✅-3-服务端层-异常栈追踪-错误封装返回","children":[]},{"level":3,"title":"✅** ④ 多输出机制：日志、监控、告警系统联动**","slug":"✅-4-多输出机制-日志、监控、告警系统联动","link":"#✅-4-多输出机制-日志、监控、告警系统联动","children":[]},{"level":3,"title":"✅** ⑤ 用户反馈机制设计（避免白屏）**","slug":"✅-5-用户反馈机制设计-避免白屏","link":"#✅-5-用户反馈机制设计-避免白屏","children":[]}]},{"level":2,"title":"🔁** 错误处理全流程图**","slug":"🔁-错误处理全流程图","link":"#🔁-错误处理全流程图","children":[]},{"level":2,"title":"🔍** 错误分类与应对表（全栈开发必备）**","slug":"🔍-错误分类与应对表-全栈开发必备","link":"#🔍-错误分类与应对表-全栈开发必备","children":[]},{"level":2,"title":"🛠** 实战加分项**","slug":"🛠-实战加分项","link":"#🛠-实战加分项","children":[]},{"level":2,"title":"✨** 总结：构建稳定性第一的全栈错误处理系统**","slug":"✨-总结-构建稳定性第一的全栈错误处理系统","link":"#✨-总结-构建稳定性第一的全栈错误处理系统","children":[]},{"level":2,"title":"","slug":"","link":"#","children":[]}],"git":{"createdTime":1753707779000,"updatedTime":1753707779000,"contributors":[{"name":"an31742","email":"2234170284@qq.com","commits":1}]},"readingTime":{"minutes":3.97,"words":1190},"filePathRelative":"businessProblem/进阶/🚨 全栈错误处理实战指南：从前端到后端的多维应对策略.md","localizedDate":"2025年7月28日","autoDesc":true}');export{E as comp,y as data};
