import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as i,a as s}from"./app-CEBb2VWP.js";const n={},l=s(`<h1 id="垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#垃圾回收机制"><span>垃圾回收机制</span></a></h1><h3 id="回收机制原理" tabindex="-1"><a class="header-anchor" href="#回收机制原理"><span>回收机制原理</span></a></h3><ul><li>解决内存的泄露，垃圾回收机制会定期（周期性）找出那些不再用到的内存（变量），然后释放其内存。现在各大浏览器通常采用的垃圾回收机制有两种方法：标记清除，引用计数。</li></ul><h3 id="标记清除" tabindex="-1"><a class="header-anchor" href="#标记清除"><span>标记清除</span></a></h3><ul><li>js中最常用的垃圾回收方式就是标记清除。</li><li>垃圾回收机制在运行的时候会给存储再内存中的所有变量都加上标记（可以是任何标记方式）</li><li>然后，它会去掉处在环境中的变量及被环境中的变量引用的变量标记（闭包）。</li><li>而在此之后剩下的带有标记的变量被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。</li><li>最后垃圾回收机制到下一个周期运行时，将释放这些变量的内存，回收它们所占用的空间。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>function test(){</span></span>
<span class="line"><span>    var a = 10;    //被标记&quot;进入环境&quot;</span></span>
<span class="line"><span>    var b = &quot;hello&quot;;    //被标记&quot;进入环境&quot;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>test();    //执行完毕后之后，a和b又被标记&quot;离开环境&quot;，被回收</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>到目前为止，IE、Firefox、Opera、Chrome、Safari的js实现使用的都是标记清除的垃圾回收策略或类似的策略，只不过垃圾收集的时间间隔互不相同。</li></ul><h3 id="计数清除" tabindex="-1"><a class="header-anchor" href="#计数清除"><span>计数清除</span></a></h3><ul><li>另一种不太常见的垃圾回收策略是引用计数。引用计数的含义是跟踪记录每个值被引用的次数。</li><li>我们知道，IE中有一部分对象并不是原生JavaScript对象。例如，其BOM和DOM中的对象就是使用C++以COM（Component Object Model，组件对象）对象的形式实现的，而COM对象的垃圾回收器就是采用的引用计数的策略。因此，即使IE的Javascript引擎使用标记清除的策略来实现的，但JavaScript访问的COM对象依然是基于引用计数的策略的。说白了，只要IE中涉及COM对象，就会存在循环引用的问题。</li><li>当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其所占的内存空间给收回来。这样，垃圾收集器下次再运行时，它就会释放那些引用次数为0的值所占的内存。</li></ul><hr><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const arr = [1,2,3,4];</span></span>
<span class="line"><span>console.log(&quot;hello world&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上面的代码中，数组[1,2,3,4]是一个值，会占用内存。变量arr是仅有的对这个值的引用，因此引用次数为1。尽管后面的代码没有用到arr，它是会持续占用内存。如果增加一行代码，解除arr对[1,2,3,4]引用，这块内存就可以被垃圾回收机制释放了。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>let arr = [1,2,3,4];</span></span>
<span class="line"><span>console.log(&quot;hello world&quot;);</span></span>
<span class="line"><span>arr = null;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上面代码中，arr重置为null，就解除了对[1，2，3，4]的引用，引用次数变成了0，内存就可以释放出来了。</li></ul><h3 id="对象object优化" tabindex="-1"><a class="header-anchor" href="#对象object优化"><span>对象object优化</span></a></h3><ul><li>{“foo”:”bar”}这种方式新建的带属性的对象，常常作为方法的返回值来使用，可是这将会导致过多的内存创建，</li><li>因此最好的解决办法是：每一次函数调用完成之后，将需要返回的数据放入一个全局的对象中，并返回此全局对象。</li><li>如果使用这种方式，就意味着每一次方法调用都会导致全局对象内容的修改，这有可能会导致错误的发生。</li><li>有一种方式能够保证对象（确保对象prototype上没有属性）的重复利用，那就是遍历此对象的所有属性，并逐个删除，最终将对象清理为一个空对象。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 删除obj对象的所有属性，高效的将obj转化为一个崭新的对象！</span></span>
<span class="line"><span>cr.wipe = function (obj) {</span></span>
<span class="line"><span>    for (var p in obj) {</span></span>
<span class="line"><span>         if (obj.hasOwnProperty(p))</span></span>
<span class="line"><span>            delete obj[p];</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>有些时候，你可以使用cr.wipe(obj)方法清理对象，再为obj添加新的属性，就可以达到重复利用对象的目的。</li><li>虽然通过清空一个对象来获取“新对象”的做法，比简单的通过{}来创建对象要耗时一些，但是在实时性要求很高的代码中，这一点短暂的时间消耗，将会有效的减少垃圾堆积，并且最终避免垃圾回收暂停，这是非常值得的！</li></ul><h3 id="数组array优化" tabindex="-1"><a class="header-anchor" href="#数组array优化"><span>数组array优化</span></a></h3><ul><li>将[]赋值给一个数组对象，是清空数组的捷径（例如： arr = [];），但是需要注意的是，这种方式又创建了一个新的空对象，并且将原来的数组对象变成了一小片内存垃圾！</li><li>优化：实际上，将数组长度赋值为0（arr.length = 0）也能达到清空数组的目的，并且同时能实现数组重用，减少内存垃圾的产生。</li><li>不要调用array的pop方法（pop将会使得array的最后一个元素将会变成内存垃圾），</li><li>而应该使用一个索引来记录数组的最后一个元素的位置，在pop时简单的将索引减一即可</li><li>类似的，将索引加1来代替array的push操作，只有当索引对应的元素不存在时，才执行真正的push为数组加入一个新元素。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>var arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];</span></span>
<span class="line"><span>arr.length = arr.length-1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="weakmap" tabindex="-1"><a class="header-anchor" href="#weakmap"><span>WeakMap</span></a></h3><ul><li>最好能有一种方法，在新建引用的时候就声明，哪些引用必须手动清除，哪些引用可以忽略不计，当其他引用消失以后，垃圾回收机制就可以释放内存。这样就能大大减轻程序员的负担，你只要清除主要引用就可以了。</li><li>ES6 考虑到了这一点，推出了两种新的数据结构：WeakSet 和 WeakMap。它们对于值的引用都是不计入垃圾回收机制的，所以名字里面才会有一个&quot;Weak&quot;，表示这是弱引用。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const wm = new WeakMap();</span></span>
<span class="line"><span>const element = document.getElementById(&#39;example&#39;);</span></span>
<span class="line"><span>wm.set(element, &#39;some information&#39;);</span></span>
<span class="line"><span>wm.get(element) // &quot;some information&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>先新建一个 Weakmap 实例。然后，将一个DOM 节点作为键名存入该实例，并将一些附加信息作为键值，一起存放在 WeakMap 里面。这时，WeakMap 里面对element的引用就是弱引用，不会被计入垃圾回收机制。</li><li>也就是说，DOM 节点对象的引用计数是1，而不是2。</li><li>这时，一旦消除对该节点的引用，它占用的内存就会被垃圾回收机制释放。Weakmap 保存的这个键值对，也会自动消失。</li><li>基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。</li><li>接下的代码中，就是只要有对象属性的的问题，对象用完就要清除。</li></ul>`,25),t=[l];function r(p,d){return i(),a("div",null,t)}const h=e(n,[["render",r],["__file","垃圾回收机制.html.vue"]]),u=JSON.parse('{"path":"/frontEndInterview/JavaScript/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html","title":"垃圾回收机制","lang":"zh-CN","frontmatter":{"title":"垃圾回收机制","icon":"circle-info","description":"垃圾回收机制 回收机制原理 解决内存的泄露，垃圾回收机制会定期（周期性）找出那些不再用到的内存（变量），然后释放其内存。现在各大浏览器通常采用的垃圾回收机制有两种方法：标记清除，引用计数。 标记清除 js中最常用的垃圾回收方式就是标记清除。 垃圾回收机制在运行的时候会给存储再内存中的所有变量都加上标记（可以是任何标记方式） 然后，它会去掉处在环境中的变...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/frontEndInterview/JavaScript/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"前端知识随笔"}],["meta",{"property":"og:title","content":"垃圾回收机制"}],["meta",{"property":"og:description","content":"垃圾回收机制 回收机制原理 解决内存的泄露，垃圾回收机制会定期（周期性）找出那些不再用到的内存（变量），然后释放其内存。现在各大浏览器通常采用的垃圾回收机制有两种方法：标记清除，引用计数。 标记清除 js中最常用的垃圾回收方式就是标记清除。 垃圾回收机制在运行的时候会给存储再内存中的所有变量都加上标记（可以是任何标记方式） 然后，它会去掉处在环境中的变..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T10:03:41.000Z"}],["meta",{"property":"article:author","content":"小安"}],["meta",{"property":"article:modified_time","content":"2024-06-23T10:03:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"垃圾回收机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-23T10:03:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小安\\",\\"url\\":\\"https://github.com/an31742\\"}]}"]]},"headers":[{"level":3,"title":"回收机制原理","slug":"回收机制原理","link":"#回收机制原理","children":[]},{"level":3,"title":"标记清除","slug":"标记清除","link":"#标记清除","children":[]},{"level":3,"title":"计数清除","slug":"计数清除","link":"#计数清除","children":[]},{"level":3,"title":"对象object优化","slug":"对象object优化","link":"#对象object优化","children":[]},{"level":3,"title":"数组array优化","slug":"数组array优化","link":"#数组array优化","children":[]},{"level":3,"title":"WeakMap","slug":"weakmap","link":"#weakmap","children":[]}],"git":{"createdTime":1719137021000,"updatedTime":1719137021000,"contributors":[{"name":"an31742","email":"2234170284@qq.com","commits":1}]},"readingTime":{"minutes":6.09,"words":1827},"filePathRelative":"frontEndInterview/JavaScript/垃圾回收机制.md","localizedDate":"2024年6月23日","autoDesc":true}');export{h as comp,u as data};
