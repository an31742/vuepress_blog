import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,c as d,e as s,d as l,w as e,a as i,o,f as a}from"./app-D1s-CSjg.js";const p={},c={id:"🧠-本质透视镜",tabindex:"-1"},u={class:"header-anchor",href:"#🧠-本质透视镜"},h=s("hr",null,null,-1),b={id:"🧩-关系拓扑图-qiankun-vs-手写实现",tabindex:"-1"},g={class:"header-anchor",href:"#🧩-关系拓扑图-qiankun-vs-手写实现"},v=s("hr",null,null,-1),m={id:"🎯-行动意义锚点",tabindex:"-1"},_={class:"header-anchor",href:"#🎯-行动意义锚点"},f=s("hr",null,null,-1),y={id:"🔧-步骤拆解器-核心模块拆解与-qiankun-对比",tabindex:"-1"},k={class:"header-anchor",href:"#🔧-步骤拆解器-核心模块拆解与-qiankun-对比"},E={id:"✅-1-全局对象隔离-proxy-实现",tabindex:"-1"},x={class:"header-anchor",href:"#✅-1-全局对象隔离-proxy-实现"},w=i(`<div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>export class Sandbox {</span></span>
<span class="line"><span>  private fakeWindow: any = Object.create(null)</span></span>
<span class="line"><span>  private proxy: WindowProxy</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  constructor() {</span></span>
<span class="line"><span>    const rawWindow = window</span></span>
<span class="line"><span>    this.proxy = new Proxy(this.fakeWindow, {</span></span>
<span class="line"><span>      get: (target, key) =&gt; (key in target ? target[key] : rawWindow[key]),</span></span>
<span class="line"><span>      set: (target, key, value) =&gt; (target[key] = value, true),</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  getProxy() {</span></span>
<span class="line"><span>    return this.proxy</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  clear() {</span></span>
<span class="line"><span>    Object.keys(this.fakeWindow).forEach(k =&gt; delete this.fakeWindow[k])</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),A=i(`<div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const sandbox = new Proxy(window, {</span></span>
<span class="line"><span>  get(target, key) {</span></span>
<span class="line"><span>    return fakeWindow[key] || window[key];</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  set(target, key, value) {</span></span>
<span class="line"><span>    fakeWindow[key] = value</span></span>
<span class="line"><span>    return true</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),B=s("hr",null,null,-1),S={id:"✅-2-样式隔离机制-css-scope",tabindex:"-1"},Q={class:"header-anchor",href:"#✅-2-样式隔离机制-css-scope"},M=i(`<div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>export function scopeCSS(css: string, scopeId: string): string {</span></span>
<span class="line"><span>  return css.replace(/([^{]+){/g, (selector) =&gt; {</span></span>
<span class="line"><span>    const scopedSelector = selector</span></span>
<span class="line"><span>      .split(&#39;,&#39;)</span></span>
<span class="line"><span>      .map(s =&gt; \`#\${scopeId} \${s.trim()}\`)</span></span>
<span class="line"><span>      .join(&#39;, &#39;)</span></span>
<span class="line"><span>    return \`\${scopedSelector} {\`</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),C=i(`<div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 使用 shadowRoot + adoptedStyleSheets 实现样式沙箱</span></span>
<span class="line"><span>const shadow = container.attachShadow({ mode: &#39;open&#39; })</span></span>
<span class="line"><span>shadow.appendChild(appContent)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),F=s("hr",null,null,-1),P={id:"✅-3-子应用资源加载",tabindex:"-1"},q={class:"header-anchor",href:"#✅-3-子应用资源加载"},T=i(`<div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>export async function loadMicroApp(appUrl: string) {</span></span>
<span class="line"><span>  const html = await fetch(appUrl).then(res =&gt; res.text())</span></span>
<span class="line"><span>  const parser = new DOMParser()</span></span>
<span class="line"><span>  const doc = parser.parseFromString(html, &#39;text/html&#39;)</span></span>
<span class="line"><span>  const scriptUrls = Array.from(doc.querySelectorAll(&#39;script[src]&#39;)).map(s =&gt; s.src)</span></span>
<span class="line"><span>  const scripts = await Promise.all(scriptUrls.map(url =&gt; fetch(url).then(res =&gt; res.text())))</span></span>
<span class="line"><span>  const sandbox = new Sandbox()</span></span>
<span class="line"><span>  scripts.forEach(script =&gt; {</span></span>
<span class="line"><span>    const fn = new Function(&#39;window&#39;, script)</span></span>
<span class="line"><span>    fn(sandbox.getProxy())</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),N=i(`<div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 使用 import-html-entry 解析 HTML 并注入 DOM、script</span></span>
<span class="line"><span>import { importEntry } from &#39;import-html-entry&#39;</span></span>
<span class="line"><span>const { template, execScripts } = await importEntry(entryUrl)</span></span>
<span class="line"><span>const appContent = template</span></span>
<span class="line"><span>const appExports = await execScripts()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),W=s("hr",null,null,-1),j={id:"✅-4-通信机制-postmessage-通道",tabindex:"-1"},D={class:"header-anchor",href:"#✅-4-通信机制-postmessage-通道"},O=i(`<div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>export class SandboxMessenger {</span></span>
<span class="line"><span>  constructor(private channelName: string) {}</span></span>
<span class="line"><span>  send(message: any) {</span></span>
<span class="line"><span>    window.parent.postMessage({ from: this.channelName, ...message }, &#39;*&#39;)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  listen(handler: (msg: any) =&gt; void) {</span></span>
<span class="line"><span>    window.addEventListener(&#39;message&#39;, (e) =&gt; {</span></span>
<span class="line"><span>      if (e.data.from !== this.channelName) handler(e.data)</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),G=i(`<div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const { onGlobalStateChange, setGlobalState } = initGlobalState({ user: &#39;admin&#39; })</span></span>
<span class="line"><span>onGlobalStateChange((val, prev) =&gt; console.log(val))</span></span>
<span class="line"><span>setGlobalState({ user: &#39;test&#39; })</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),H=s("hr",null,null,-1),L={id:"✅-5-生命周期管理",tabindex:"-1"},U={class:"header-anchor",href:"#✅-5-生命周期管理"},I=i(`<div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>export interface MicroApp {</span></span>
<span class="line"><span>  name: string</span></span>
<span class="line"><span>  mount: (el: HTMLElement) =&gt; void</span></span>
<span class="line"><span>  unmount: () =&gt; void</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export const apps: Record&lt;string, MicroApp&gt; = {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export function registerApp(app: MicroApp) {</span></span>
<span class="line"><span>  apps[app.name] = app</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),R=i(`<div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>registerMicroApps([</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    name: &#39;app1&#39;,</span></span>
<span class="line"><span>    entry: &#39;//localhost:7100&#39;,</span></span>
<span class="line"><span>    container: &#39;#subapp-viewport&#39;,</span></span>
<span class="line"><span>    activeRule: &#39;/app1&#39;,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),V=s("hr",null,null,-1),z={id:"🖼-架构图-样例结构",tabindex:"-1"},Z={class:"header-anchor",href:"#🖼-架构图-样例结构"},$=i(`<div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>main-app/</span></span>
<span class="line"><span>  |- index.html</span></span>
<span class="line"><span>  |- sandbox/</span></span>
<span class="line"><span>       |- sandbox.ts</span></span>
<span class="line"><span>       |- scoped-style.ts</span></span>
<span class="line"><span>       |- messaging.ts</span></span>
<span class="line"><span>  |- micro-apps/</span></span>
<span class="line"><span>       |- app1/</span></span>
<span class="line"><span>           |- index.html</span></span>
<span class="line"><span>           |- main.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,2),J={id:"✅-总结",tabindex:"-1"},K={class:"header-anchor",href:"#✅-总结"},X=s("hr",null,null,-1),Y={id:"📘-延伸阅读与参考",tabindex:"-1"},ss={class:"header-anchor",href:"#📘-延伸阅读与参考"},ns={href:"https://github.com/umijs/qiankun",target:"_blank",rel:"noopener noreferrer"},ls={href:"https://github.com/kuitos/import-html-entry",target:"_blank",rel:"noopener noreferrer"},es={href:"https://single-spa.js.org/docs/getting-started-overview",target:"_blank",rel:"noopener noreferrer"},as={href:"https://micro-frontends.org/",target:"_blank",rel:"noopener noreferrer"},is=s("hr",null,null,-1);function ts(rs,ds){const n=r("font");return o(),d("div",null,[s("h2",c,[s("a",u,[s("span",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("🧠")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 本质透视镜")]),_:1})])])]),s("p",null,[s("strong",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("微前端沙箱本质是")]),_:1})]),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("：在主应用中运行多个子应用时，通过技术手段实现资源隔离、状态隔离和通信解耦。")]),_:1})]),h,s("h2",b,[s("a",g,[s("span",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("🧩")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 关系拓扑图：Qiankun vs 手写实现")]),_:1})])])]),s("table",null,[s("thead",null,[s("tr",null,[s("th",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("维度")]),_:1})]),s("th",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("Qiankun 实现")]),_:1})]),s("th",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("手写实现")]),_:1})])])]),s("tbody",null,[s("tr",null,[s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("沙箱机制")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("Proxy + snapshot + 单例")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("Proxy + custom global + iframe 隔离")]),_:1})])]),s("tr",null,[s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("样式隔离")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("Shadow DOM + Scoped CSS + strictMode")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("CSS Scope 前缀/iframe 完全隔离")]),_:1})])]),s("tr",null,[s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("生命周期管理")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("注册 registerMicroApp，自动绑定钩子")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("手动 mount/unmount 注册钩子")]),_:1})])]),s("tr",null,[s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("子应用加载方式")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("HTML entry + import-html-entry")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("import-map 动态加载或 iframe")]),_:1})])]),s("tr",null,[s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("通信机制")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("自定义事件 + 全局状态管理")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("postMessage + 双向通道")]),_:1})])])])]),v,s("h2",m,[s("a",_,[s("span",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("🎯")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 行动意义锚点")]),_:1})])])]),s("p",null,[s("strong",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("核心价值是")]),_:1})]),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("：")]),_:1})]),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("避免主子应用间全局污染、样式冲突、状态互串，为多团队协作开发提供安全执行环境。")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 获得：灵活、可控的微前端架构 ")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("❌")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 避免：运行时污染、样式混乱、状态错误等问题")]),_:1}),f,s("h2",y,[s("a",k,[s("span",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("🔧")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 步骤拆解器：核心模块拆解与 Qiankun 对比")]),_:1})])])]),s("h3",E,[s("a",x,[s("span",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 1. 全局对象隔离（Proxy 实现）")]),_:1})])])]),s("p",null,[s("strong",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("手写实现")]),_:1})]),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("：")]),_:1})]),w,s("p",null,[s("strong",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("Qiankun 实现")]),_:1})]),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("（简化）：")]),_:1})]),A,l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("📌")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 区别：Qiankun 还引入快照机制 snapshot，记录状态以实现切换恢复。")]),_:1}),B,s("h3",S,[s("a",Q,[s("span",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 2. 样式隔离机制（CSS Scope）")]),_:1})])])]),s("p",null,[s("strong",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("手写实现")]),_:1})]),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("：")]),_:1})]),M,s("p",null,[s("strong",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("Qiankun 实现")]),_:1})]),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("（strictStyleIsolation）：")]),_:1})]),C,l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("📌")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 区别：Qiankun 提供三种模式，默认 legacy，strict 使用 ShadowDOM，性能更优。")]),_:1}),F,s("h3",P,[s("a",q,[s("span",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 3. 子应用资源加载")]),_:1})])])]),s("p",null,[s("strong",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("手写实现")]),_:1})]),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("：")]),_:1})]),T,s("p",null,[s("strong",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("Qiankun 实现")]),_:1})]),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("：")]),_:1})]),N,l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("📌")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 区别：Qiankun 抽象了 HTML 解构、script 解耦，适配性更强。")]),_:1}),W,s("h3",j,[s("a",D,[s("span",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 4. 通信机制：postMessage 通道")]),_:1})])])]),s("p",null,[s("strong",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("手写实现")]),_:1})]),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("：")]),_:1})]),O,s("p",null,[s("strong",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("Qiankun 实现")]),_:1})]),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("：")]),_:1})]),G,l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("📌")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 区别：Qiankun 提供统一 API，支持订阅/广播，全局状态共享。")]),_:1}),H,s("h3",L,[s("a",U,[s("span",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 5. 生命周期管理")]),_:1})])])]),s("p",null,[s("strong",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("手写实现")]),_:1})]),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("：")]),_:1})]),I,s("p",null,[s("strong",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("Qiankun 实现")]),_:1})]),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("：")]),_:1})]),R,l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("📌")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 区别：Qiankun 自动处理路径匹配、容器注入、激活时机。")]),_:1}),V,s("h2",z,[s("a",Z,[s("span",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("🖼")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 架构图 & 样例结构")]),_:1})])])]),$,s("h2",J,[s("a",K,[s("span",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 总结")]),_:1})])])]),s("table",null,[s("thead",null,[s("tr",null,[s("th",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("能力点")]),_:1})]),s("th",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("Qiankun")]),_:1})]),s("th",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("手写沙箱")]),_:1})])])]),s("tbody",null,[s("tr",null,[s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("自动 HTML 解析")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("❌")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("（需手动）")]),_:1})])]),s("tr",null,[s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("生命周期钩子")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 自动钩子绑定")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 手动实现")]),_:1})])]),s("tr",null,[s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("样式隔离")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 三种模式支持")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" Scope 前缀/iframe")]),_:1})])]),s("tr",null,[s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("状态通信")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 全局状态管理")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" postMessage 通道")]),_:1})])]),s("tr",null,[s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("iframe 隔离")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 支持")]),_:1})]),s("td",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("✅")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 支持")]),_:1})])])])]),X,s("h2",Y,[s("a",ss,[s("span",null,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("📘")]),_:1}),l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a(" 延伸阅读与参考")]),_:1})])])]),s("ul",null,[s("li",null,[s("a",ns,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("qiankun GitHub")]),_:1})])]),s("li",null,[s("a",ls,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("import-html-entry 源码")]),_:1})])]),s("li",null,[s("a",es,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("single-spa 原理")]),_:1})])]),s("li",null,[s("a",as,[l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("Micro Frontends 设计指南")]),_:1})])])]),is,l(n,{style:{color:"rgb(0, 0, 0)"}},{default:e(()=>[a("如果你对完整项目结构、配套 demo 或部署策略有兴趣，也可以留言，我将提供一套完整的运行环境以及性能优化建议。")]),_:1})])}const cs=t(p,[["render",ts],["__file","🚀 从零手写一个微前端沙箱：对标 Qiankun 的完整实现与原理解析.html.vue"]]),us=JSON.parse('{"path":"/businessProblem/%E8%BF%9B%E9%98%B6/%F0%9F%9A%80%20%E4%BB%8E%E9%9B%B6%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%BE%AE%E5%89%8D%E7%AB%AF%E6%B2%99%E7%AE%B1%EF%BC%9A%E5%AF%B9%E6%A0%87%20Qiankun%20%E7%9A%84%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html","title":"从零手写一个微前端沙箱：对标 Qiankun 的完整实现与原理解析","lang":"zh-CN","frontmatter":{"title":"从零手写一个微前端沙箱：对标 Qiankun 的完整实现与原理解析","icon":"circle-info","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/businessProblem/%E8%BF%9B%E9%98%B6/%F0%9F%9A%80%20%E4%BB%8E%E9%9B%B6%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%BE%AE%E5%89%8D%E7%AB%AF%E6%B2%99%E7%AE%B1%EF%BC%9A%E5%AF%B9%E6%A0%87%20Qiankun%20%E7%9A%84%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"前端知识随笔"}],["meta",{"property":"og:title","content":"从零手写一个微前端沙箱：对标 Qiankun 的完整实现与原理解析"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-28T13:02:59.000Z"}],["meta",{"property":"article:author","content":"小安"}],["meta",{"property":"article:modified_time","content":"2025-07-28T13:02:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从零手写一个微前端沙箱：对标 Qiankun 的完整实现与原理解析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-28T13:02:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小安\\",\\"url\\":\\"https://github.com/an31742\\"}]}"]]},"headers":[{"level":2,"title":"🧠 本质透视镜","slug":"🧠-本质透视镜","link":"#🧠-本质透视镜","children":[]},{"level":2,"title":"🧩 关系拓扑图：Qiankun vs 手写实现","slug":"🧩-关系拓扑图-qiankun-vs-手写实现","link":"#🧩-关系拓扑图-qiankun-vs-手写实现","children":[]},{"level":2,"title":"🎯 行动意义锚点","slug":"🎯-行动意义锚点","link":"#🎯-行动意义锚点","children":[]},{"level":2,"title":"🔧 步骤拆解器：核心模块拆解与 Qiankun 对比","slug":"🔧-步骤拆解器-核心模块拆解与-qiankun-对比","link":"#🔧-步骤拆解器-核心模块拆解与-qiankun-对比","children":[{"level":3,"title":"✅ 1. 全局对象隔离（Proxy 实现）","slug":"✅-1-全局对象隔离-proxy-实现","link":"#✅-1-全局对象隔离-proxy-实现","children":[]},{"level":3,"title":"✅ 2. 样式隔离机制（CSS Scope）","slug":"✅-2-样式隔离机制-css-scope","link":"#✅-2-样式隔离机制-css-scope","children":[]},{"level":3,"title":"✅ 3. 子应用资源加载","slug":"✅-3-子应用资源加载","link":"#✅-3-子应用资源加载","children":[]},{"level":3,"title":"✅ 4. 通信机制：postMessage 通道","slug":"✅-4-通信机制-postmessage-通道","link":"#✅-4-通信机制-postmessage-通道","children":[]},{"level":3,"title":"✅ 5. 生命周期管理","slug":"✅-5-生命周期管理","link":"#✅-5-生命周期管理","children":[]}]},{"level":2,"title":"🖼 架构图 & 样例结构","slug":"🖼-架构图-样例结构","link":"#🖼-架构图-样例结构","children":[]},{"level":2,"title":"✅ 总结","slug":"✅-总结","link":"#✅-总结","children":[]},{"level":2,"title":"📘 延伸阅读与参考","slug":"📘-延伸阅读与参考","link":"#📘-延伸阅读与参考","children":[]}],"git":{"createdTime":1753707779000,"updatedTime":1753707779000,"contributors":[{"name":"an31742","email":"2234170284@qq.com","commits":1}]},"readingTime":{"minutes":6.09,"words":1826},"filePathRelative":"businessProblem/进阶/🚀 从零手写一个微前端沙箱：对标 Qiankun 的完整实现与原理解析.md","localizedDate":"2025年7月28日"}');export{cs as comp,us as data};
