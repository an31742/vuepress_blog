import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,a as s}from"./app-1_sQ8TOy.js";const n={},t=s(`<p>强缓存与协商缓存机制详解 强缓存（Strong Cache） 核心原理：浏览器直接从本地副本加载资源，不发送请求到服务器。 实现方式：</p><ol><li>Expires 响应头（HTTP/1.0）</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Expires: Wed, 21 Oct 2025 07:28:00 GMT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>○ 问题：依赖客户端时间，时间不同步会导致缓存失效异常</p><ol><li>Cache-Control 响应头（HTTP/1.1 主流方案）</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Cache-Control: max-age=31536000, public, immutable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>○ 关键指令： ■ max-age=秒：缓存有效期（如一年：31536000） ■ public：允许代理服务器缓存 ■ private：仅允许浏览器缓存 ■ no-store：完全禁用缓存 ■ no-cache：强制协商缓存 ■ immutable：资源永不变（内容哈希命名时使用） 强缓存生效表现： ● 浏览器状态码：200 (from disk cache) 或 200 (from memory cache) ● 网络面板：请求显示灰色（未发送实际请求） 适用场景：静态资源（JS/CSS/图片）使用内容哈希命名（如 app.d4f9g3.js）</p><p>协商缓存（Negotiation Cache） 核心原理：浏览器发送验证请求，由服务器决定是否使用缓存。 实现方式：</p><ol><li>Last-Modified / If-Modified-Since</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># 响应头</span></span>
<span class="line"><span>Last-Modified: Tue, 15 Aug 2023 12:00:00 GMT</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 请求头（下次请求时）</span></span>
<span class="line"><span>If-Modified-Since: Tue, 15 Aug 2023 12:00:00 GMT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>● 流程： a. 服务器比较文件修改时间 b. 未修改 → 返回 304 Not Modified（空响应体） c. 已修改 → 返回 200 和新资源 ● 缺点： ○ 秒级精度，1秒内修改无法检测 ○ 文件内容不变但修改时间变化（如重命名）会导致失效 2. ETag / If-None-Match（优先级更高）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># 响应头</span></span>
<span class="line"><span>ETag: &quot;d3b07384d113edec49eaa6238ad5ff00&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 请求头（下次请求时）</span></span>
<span class="line"><span>If-None-Match: &quot;d3b07384d113edec49eaa6238ad5ff00&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>● ETag 类型： ○ 强校验：字节级匹配（如 ETag: &quot;xyz123&quot;） ○ 弱校验：内容语义匹配（如 ETag: W/&quot;xyz123&quot;） ● 流程： a. 服务器比较 ETag 值 b. 匹配 → 返回 304 c. 不匹配 → 返回 200 和新资源 协商缓存生效表现： ● 网络请求状态码：304 Not Modified ● 响应体大小：几KB（仅响应头）</p><p>缓存决策流程</p><p>最佳实践策略 静态资源缓存方案</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># 带哈希的资源（强缓存1年）</span></span>
<span class="line"><span>Cache-Control: public, max-age=31536000, immutable</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 不带哈希的HTML（协商缓存）</span></span>
<span class="line"><span>Cache-Control: no-cache</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>API请求缓存</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># 频繁更新的数据</span></span>
<span class="line"><span>Cache-Control: max-age=0, must-revalidate</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 实时性要求低的数据</span></span>
<span class="line"><span>Cache-Control: max-age=300</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缓存层级优化 缓存类型 存储位置 特点 Memory 内存 快速读取，关闭标签页失效 Disk 硬盘 持久化，容量大 ServiceWorker 浏览器独立线程 完全可控，离线可用</p><p>调试与验证工具</p><ol><li>Chrome DevTools： ○ Network面板查看Status列：200 (from cache) / 304 ○ 响应头查看Cache-Control/ETag等字段</li><li>命令行检测： curl -I https://example.com/static/logo.png 查看返回的缓存相关头部</li><li>缓存清除策略： ○ 内容变更 → 修改URL（如添加哈希） ○ 强制更新 → Ctrl+F5（跳过强缓存） ○ 彻底清除 → chrome://settings/clearBrowserData 黄金法则： 内容哈希资源用强缓存，动态资源用协商缓存 通过immutable避免非必要请求，通过ETag保证数据实时性</li></ol>`,21),l=[t];function r(p,d){return a(),i("div",null,l)}const h=e(n,[["render",r],["__file","缓存.html.vue"]]),m=JSON.parse('{"path":"/interview/%E7%BC%93%E5%AD%98.html","title":"缓存","lang":"zh-CN","frontmatter":{"title":"缓存","icon":"object-group","tag":["面试必考"],"description":"强缓存与协商缓存机制详解 强缓存（Strong Cache） 核心原理：浏览器直接从本地副本加载资源，不发送请求到服务器。 实现方式： Expires 响应头（HTTP/1.0） ○ 问题：依赖客户端时间，时间不同步会导致缓存失效异常 Cache-Control 响应头（HTTP/1.1 主流方案） ○ 关键指令： ■ max-age=秒：缓存有效期（...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/interview/%E7%BC%93%E5%AD%98.html"}],["meta",{"property":"og:site_name","content":"前端知识随笔"}],["meta",{"property":"og:title","content":"缓存"}],["meta",{"property":"og:description","content":"强缓存与协商缓存机制详解 强缓存（Strong Cache） 核心原理：浏览器直接从本地副本加载资源，不发送请求到服务器。 实现方式： Expires 响应头（HTTP/1.0） ○ 问题：依赖客户端时间，时间不同步会导致缓存失效异常 Cache-Control 响应头（HTTP/1.1 主流方案） ○ 关键指令： ■ max-age=秒：缓存有效期（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-06T17:24:01.000Z"}],["meta",{"property":"article:author","content":"小安"}],["meta",{"property":"article:tag","content":"面试必考"}],["meta",{"property":"article:modified_time","content":"2025-08-06T17:24:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"缓存\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-06T17:24:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小安\\",\\"url\\":\\"https://github.com/an31742\\"}]}"]]},"headers":[],"git":{"createdTime":1754501041000,"updatedTime":1754501041000,"contributors":[{"name":"an31742","email":"2234170284@qq.com","commits":1}]},"readingTime":{"minutes":2.58,"words":773},"filePathRelative":"interview/缓存.md","localizedDate":"2025年8月6日","autoDesc":true}');export{h as comp,m as data};
